[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nCollection2 = Package['aldeed:collection2'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nSymbol = Package['ecmascript-runtime-client'].Symbol;\nMap = Package['ecmascript-runtime-client'].Map;\nSet = Package['ecmascript-runtime-client'].Set;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"api\":{\"BoardsRoutes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/BoardsRoutes.js                                                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Boards;\nmodule.link(\"../models/Boards\", {\n  Boards: function (v) {\n    Boards = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Random;\nmodule.link(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes: function (v) {\n    JsonRoutes = v;\n  }\n}, 3);\nMeteor.methods({\n  'createBoard': function (_ref) {\n    var boardName = _ref.boardName,\n        privacy = _ref.privacy;\n\n    /*if(!Meteor.userId()){\r\n        throw new Meteor.Error('Not Authorized')\r\n    }else{*/\n    var privacyInt = parseInt(privacy);\n    var id = Random.id();\n    return Boards.insert({\n      boardId: id,\n      boardTitle: boardName,\n      boardPrivacy: privacyInt,\n      boardUser: [Meteor.user()]\n    });\n  },\n  'getBoard': function (_ref2) {\n    var idBoard = _ref2.idBoard;\n    var board;\n    var countDoc = Boards.find({\n      \"boardId\": idBoard\n    }).count();\n    console.log(countDoc);\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": idBoard\n      });\n      return board;\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'deleteBoard': function (_ref3) {\n    var idBoard = _ref3.idBoard;\n  },\n  'editBoard': function (_ref4) {\n    var idBoard = _ref4.idBoard,\n        newParams = _ref4.newParams;\n  },\n  'getAllBoards': function (_ref5) {\n    var idUser = _ref5.idUser;\n  }\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ListsRoutes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/ListsRoutes.js                                                                                     //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Lists;\nmodule.link(\"../models/List\", {\n  Lists: function (v) {\n    Lists = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Random;\nmodule.link(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes: function (v) {\n    JsonRoutes = v;\n  }\n}, 3);\nMeteor.methods({\n  'createList': function (listName) {\n    var id = Random.id();\n    return Lists.insert({\n      listId: id,\n      listTitle: listName\n    });\n  },\n  'getList': function (idList) {\n    var countDoc = Lists.find({\n      \"listId\": idList\n    }).count();\n\n    if (countDoc === 1) {\n      list = List.findOne({\n        \"listId\": idList\n      });\n      return list;\n    } else {\n      throw new Meteor.Error(404, 'List not found');\n    }\n  },\n  'deleteList': function (_ref) {\n    var idBoard = _ref.idBoard;\n  },\n  'editList': function (_ref2) {\n    var idBoard = _ref2.idBoard,\n        newParams = _ref2.newParams;\n  },\n  'getAllList': function (_ref3) {\n    var idUser = _ref3.idUser;\n  }\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"teams.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/teams.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Team;\nmodule.link(\"../models/Team\", {\n  Team: function (v) {\n    Team = v;\n  }\n}, 1);\n\n/*if(Meteor.isServer) {\r\n    Meteor.publish('teams', function teamsPublication() {\r\n        return Teams.find({\r\n            $or: [\r\n                {teamMember : {$in : [this.userId]}},\r\n                {teamOwner: this.userID},\r\n            ]\r\n        })\r\n    });\r\n}\r\n*/\nMeteor.methods({\n  \"createTeam\": function (_ref) {\n    var teamName = _ref.teamName,\n        description = _ref.description;\n\n    if (!this.userId) {\n      throw new Meteor.Error('Not-Authorized');\n    }\n\n    var teamDescription = description ? description : \"\"; //let owner = Meteor.users.findOne(this.userId)\n\n    return Team.insert({\n      teamName: teamName,\n      teamDescription: teamDescription,\n      teamOwner: this.userId\n    });\n  },\n  'getTeams': function () {\n    //check(teamId,String)\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorised');\n    }\n\n    var teams = Team.find();\n    if (teams) return teams;else throw new Meteor.Error(404, 'Team not found');\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/users.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 1);\nMeteor.methods({\n  \"users.signUp\": function (lastname, firstname, email, password) {\n    if (password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\");else if (!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\");else {\n      var options = {\n        email: email,\n        password: password,\n        profile: {\n          lastname: lastname,\n          firstname: firstname,\n          enabledMails: false,\n          email: email\n        }\n      };\n      Accounts.createUser(options);\n    }\n  },\n  \"users.updateProfile\": function (email, lastname, firstname) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        emails: [{\n          address: email,\n          verified: true\n        }],\n        'profile.lastname': lastname,\n        'profile.firstname': firstname,\n        'profile.email': email\n      }\n    });\n    return Meteor.user();\n  },\n  'users.changePassword': function (actualPassword, newPassword) {\n    var checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\n\n    if (checkPassword.error) throw new Meteor.Error(checkPassword.error.reason);else {\n      Accounts.setPassword(Meteor.userId(), newPassword, {\n        logout: false\n      });\n    }\n  },\n  'users.setEnabledMails': function (enabledMails) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        'profile.enabledMails': enabledMails\n      }\n    });\n  },\n  'users.remove': function () {\n    Meteor.users.remove(Meteor.userId());\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"Activity.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Activity.js                                                                                     //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Activities: function () {\n    return Activities;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Activities = new Mongo.Collection('activities');\nActivitySchema = new SimpleSchema({\n  ActivityId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  ActivityType: {\n    type: String,\n    label: \"Type\"\n  },\n  ActivityDescription: {\n    type: String,\n    label: \"Description\"\n  },\n  ActivityUser: {\n    type: Object,\n    label: \"User\"\n  },\n  ActivityElement: {\n    type: Object,\n    label: \"Element\"\n  },\n  ActivityCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nActivities.attachSchema(ActivitySchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Attachment.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Attachment.js                                                                                   //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Attachments: function () {\n    return Attachments;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Attachments = new Mongo.Collection('attachments');\nAttachmentSchema = new SimpleSchema({\n  attachmentId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  attachmentContent: {\n    type: String,\n    label: \"Content\",\n    required: true\n  },\n  attachmentCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nAttachments.attachSchema(AttachmentSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Boards.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Boards.js                                                                                       //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Boards: function () {\n    return Boards;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Boards = new Mongo.Collection('boards');\nBoardSchema = new SimpleSchema({\n  boardId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  boardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  boardUser: {\n    type: Array,\n    label: \"Users\",\n    required: true\n  },\n  'boardUser.$': Object,\n  //se if need to replace Object with a schema\n  boardPrivacy: {\n    type: SimpleSchema.Integer,\n    label: \"Privacy\",\n    required: true\n  },\n  boardList: {\n    type: Array,\n    label: \"Lists\",\n    defaultValue: []\n  },\n  'boardList.$': Object,\n  //se if need to replace Object with a schema\n  boardTag: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'boardTag.$': Object,\n  //se if need to replace Object with a schema\n  boardTeam: {\n    type: Array,\n    label: \"Teams\",\n    defaultValue: []\n  },\n  'boardTeam.$': Object,\n  //se if need to replace Object with a schema\n  boardCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nBoards.attachSchema(BoardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Card.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Card.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Cards: function () {\n    return Cards;\n  }\n});\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar Cards = new Mongo.Collection('cards');\nCardSchema = new SimpleSchema({\n  cardId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  cardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  cardDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: []\n  },\n  cardTag: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'cardTag.$': Object,\n  //se if need to replace Object with a schema\n  cardComment: {\n    type: Array,\n    label: \"Comments\",\n    defaultValue: []\n  },\n  'cardComment.$': Object,\n  //se if need to replace Object with a schema\n  cardAttachment: {\n    type: Array,\n    label: \"Attachments\",\n    defaultValue: []\n  },\n  'cardAttachment.$': Object,\n  //se if need to replace Object with a schema\n  cardChecklist: {\n    type: Array,\n    label: \"CheckLists\",\n    defaultValue: []\n  },\n  'cardChecklist.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nCards.attachSchema(CardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CheckList.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/CheckList.js                                                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  CheckLists: function () {\n    return CheckLists;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar CheckLists = new Mongo.Collection('checklists');\nCheckListSchema = new SimpleSchema({\n  checkListId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  checkListContent: {\n    type: Array,\n    label: \"Content\",\n    defaultValue: []\n  },\n  \"checkListContent.$\": Object,\n  //see if need to replace Object with a schema\n  checkListCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nCheckLists.attachSchema(CheckListSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"CheckListElement.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/CheckListElement.js                                                                             //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  CheckLists: function () {\n    return CheckLists;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar CheckLists = new Mongo.Collection('checklists');\nCheckListSchema = new SimpleSchema({\n  checkListId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  checkListContent: {\n    type: Array,\n    label: \"Content\",\n    defaultValue: {}\n  },\n  \"checkListContent.$\": Object,\n  //see if need to replace Object with a schema\n  checkListCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nCheckLists.attachSchema(CheckListSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Comment.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Comment.js                                                                                      //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Comments: function () {\n    return Comments;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Comments = new Mongo.Collection('comments');\nCommentSchema = new SimpleSchema({\n  commentId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  commentContent: {\n    type: String,\n    label: \"Content\",\n    required: true\n  },\n  commentUser: {\n    type: Object,\n    label: \"User\"\n  },\n  commentCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nComments.attachSchema(CommentSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"List.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/List.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Lists: function () {\n    return Lists;\n  }\n});\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\nvar Lists = new Mongo.Collection('lists');\nListSchema = new SimpleSchema({\n  listId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  listTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  listCard: {\n    type: Array,\n    label: \"Cards\",\n    defaultValue: []\n  },\n  'listCard.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nLists.attachSchema(ListSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Notification.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Notification.js                                                                                 //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Notifications: function () {\n    return Notifications;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Notifications = new Mongo.Collection('notifications');\nNotificationSchema = new SimpleSchema({\n  NotificationId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  NotificationContent: {\n    type: String,\n    label: \"Content\",\n    defaultValue: []\n  },\n  NotificationUser: {\n    type: Object,\n    label: \"User\"\n  },\n  NotificationAcivity: {\n    type: Object,\n    label: \"Activity\"\n  },\n  NotificationCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nNotifications.attachSchema(NotificationSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Right.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Right.js                                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Rights: function () {\n    return Rights;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Rights = new Mongo.Collection('rights');\nRightSchema = new SimpleSchema({\n  RightId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  RightName: {\n    type: String,\n    label: \"Name\"\n  }\n});\nRights.attachSchema(RightSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Tag.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Tag.js                                                                                          //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Tags: function () {\n    return Tags;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar Tags = new Mongo.Collection('tags');\nTagSchema = new SimpleSchema({\n  tagId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  tagTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  tagCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nTags.attachSchema(TagSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Team.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Team.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Teams: function () {\n    return Teams;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar User;\nmodule.link(\"./Users.js\", {\n  User: function (v) {\n    User = v;\n  }\n}, 1);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 2);\nvar Teams = new Mongo.Collection('teams');\nvar TeamSchema = new SimpleSchema({\n  teamId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  teamName: {\n    type: String,\n    label: \"Name\"\n  },\n  teamDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: \"\"\n  },\n  teamOwner: {\n    type: String,\n    label: \"Owner\"\n  },\n  teamMembers: {\n    type: Array,\n    label: \"Members\",\n    defaultValue: []\n  },\n  \"teamMembers.$\": User,\n  //see if need to replace Object with a schema\n  teamCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nTeams.attachSchema(TeamSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Users.js                                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  User: function () {\n    return User;\n  }\n});\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema/dist/SimpleSchema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar User = new SimpleSchema({\n  name: {\n    type: String\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// main.js                                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nmodule.link(\"./api/users.js\");\nvar JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes: function (v) {\n    JsonRoutes = v;\n  }\n}, 1);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 2);\nvar Team;\nmodule.link(\"./models//Team\", {\n  Team: function (v) {\n    Team = v;\n  }\n}, 3);\nvar Board;\nmodule.link(\"./models/Boards.js\", {\n  Board: function (v) {\n    Board = v;\n  }\n}, 4);\nvar Users;\nmodule.link(\"./models/Users\", {\n  Users: function (v) {\n    Users = v;\n  }\n}, 5);\nvar Card;\nmodule.link(\"./models/Card.js\", {\n  \"default\": function (v) {\n    Card = v;\n  }\n}, 6);\nMeteor.startup(function () {\n  require(\"./api/BoardsRoutes\");\n\n  require(\"./api/ListsRoutes\");\n\n  require(\"./api/teams\");\n\n  JsonRoutes.add('post', '/signUp/', function (req, res, next) {\n    console.log(req);\n    Card.insert({\n      cardtitle: \"oui\",\n      description: \"non\"\n    });\n    JsonRoutes.sendResult(res, {\n      data: {\n        result: Card.find().fetch()\n      }\n    });\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/api/BoardsRoutes.js\");\nrequire(\"/api/ListsRoutes.js\");\nrequire(\"/api/teams.js\");\nrequire(\"/api/users.js\");\nrequire(\"/models/Activity.js\");\nrequire(\"/models/Attachment.js\");\nrequire(\"/models/Boards.js\");\nrequire(\"/models/Card.js\");\nrequire(\"/models/CheckList.js\");\nrequire(\"/models/CheckListElement.js\");\nrequire(\"/models/Comment.js\");\nrequire(\"/models/List.js\");\nrequire(\"/models/Notification.js\");\nrequire(\"/models/Right.js\");\nrequire(\"/models/Tag.js\");\nrequire(\"/models/Team.js\");\nrequire(\"/models/Users.js\");\nrequire(\"/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["api/BoardsRoutes.js","api/ListsRoutes.js","api/teams.js","api/users.js","models/Activity.js","models/Attachment.js","models/Boards.js","models/Card.js","models/CheckList.js","models/CheckListElement.js","models/Comment.js","models/List.js","models/Notification.js","models/Right.js","models/Tag.js","models/Team.js","models/Users.js","main.js"],"names":["Boards","module","link","v","Meteor","Random","JsonRoutes","methods","boardName","privacy","privacyInt","parseInt","id","insert","boardId","boardTitle","boardPrivacy","boardUser","user","idBoard","board","countDoc","find","count","console","log","findOne","Error","newParams","idUser","Middleware","use","req","res","next","query","error","sendResult","code","data","result","add","users","username","body","state","firstname","lastname","password","email","fetch","Lists","listName","listId","listTitle","idList","list","List","Team","teamName","description","userId","teamDescription","teamOwner","teams","Accounts","length","options","profile","enabledMails","createUser","update","$set","emails","address","verified","actualPassword","newPassword","checkPassword","_checkPassword","reason","setPassword","logout","remove","export","Activities","Mongo","SimpleSchema","Collection","ActivitySchema","ActivityId","type","String","label","regEx","RegEx","Id","ActivityType","ActivityDescription","ActivityUser","Object","ActivityElement","ActivityCreatedAt","Date","autoValue","attachSchema","Attachments","AttachmentSchema","attachmentId","attachmentContent","required","attachmentCreatedAt","BoardSchema","Array","Integer","boardList","defaultValue","boardTag","boardTeam","boardCreatedAt","Cards","CardSchema","cardId","cardTitle","cardDescription","cardTag","cardComment","cardAttachment","cardChecklist","listCreatedAt","CheckLists","CheckListSchema","checkListId","checkListContent","checkListCreatedAt","Comments","CommentSchema","commentId","commentContent","commentUser","commentCreatedAt","ListSchema","listCard","Notifications","NotificationSchema","NotificationId","NotificationContent","NotificationUser","NotificationAcivity","NotificationCreatedAt","Rights","RightSchema","RightId","RightName","Tags","TagSchema","tagId","tagTitle","tagCreatedAt","Teams","User","TeamSchema","teamId","teamMembers","teamCreatedAt","name","Board","Users","Card","startup","require","cardtitle"],"mappings":"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","file":"/app.js","sourcesContent":["import {Boards} from \"../models/Boards\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\nMeteor.methods({\r\n    'createBoard'({boardName, privacy}) {\r\n        /*if(!Meteor.userId()){\r\n            throw new Meteor.Error('Not Authorized')\r\n        }else{*/\r\n        let privacyInt = parseInt(privacy)\r\n        let id = Random.id();\r\n        return Boards.insert({boardId: id, boardTitle: boardName, boardPrivacy: privacyInt, boardUser: [Meteor.user()]})\r\n    },\r\n\r\n    'getBoard' ({idBoard}) {\r\n        let board;\r\n        let countDoc = Boards.find({\"boardId\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            return board;\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n\r\n    },\r\n    'deleteBoard'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editBoard' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllBoards' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n\r\n","import {Lists} from \"../models/List\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\n\r\nMeteor.methods({\r\n    'createList'(listName) {\r\n        let id = Random.id();\r\n        return Lists.insert({listId: id, listTitle: listName})\r\n    },\r\n\r\n    'getList' (idList) {\r\n        let countDoc = Lists.find({\"listId\": idList}).count();\r\n        if (countDoc === 1) {\r\n            list = List.findOne({\"listId\": idList});\r\n            return list;\r\n        } else {\r\n            throw new Meteor.Error(404, 'List not found')\r\n        }\r\n\r\n    },\r\n    'deleteList'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editList' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllList' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n\r\n","import {Meteor} from \"meteor/meteor\";\r\nimport {Team}  from \"../models/Team\";\r\n\r\n\r\n\r\n/*if(Meteor.isServer) {\r\n    Meteor.publish('teams', function teamsPublication() {\r\n        return Teams.find({\r\n            $or: [\r\n                {teamMember : {$in : [this.userId]}},\r\n                {teamOwner: this.userID},\r\n            ]\r\n        })\r\n    });\r\n}\r\n*/\r\nMeteor.methods({\r\n    \"createTeam\"({teamName,description}){\r\n        if(!this.userId){\r\n            throw new Meteor.Error('Not-Authorized');\r\n        }\r\n        let teamDescription = description ? description : \"\"\r\n        //let owner = Meteor.users.findOne(this.userId)\r\n        \r\n        return Team.insert({\r\n            teamName: teamName,\r\n            teamDescription: teamDescription,\r\n            teamOwner : this.userId\r\n        });\r\n\r\n    },\r\n\r\n    'getTeams'(){\r\n        //check(teamId,String)\r\n       if(!this.userId){\r\n            throw new Meteor.Error('not-authorised');\r\n        }\r\n\r\n        let teams = Team.find();\r\n\r\n        if(teams)\r\n            return teams\r\n        else\r\n          throw new Meteor.Error(404, 'Team not found')\r\n    }\r\n\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\n\r\nMeteor.methods({\r\n    \"users.signUp\"(lastname, firstname, email, password){\r\n        if(password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\")\r\n        else if(!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\")\r\n        else {\r\n            let options = {\r\n                email: email,\r\n                password: password,\r\n                profile: {\r\n                    lastname: lastname,\r\n                    firstname: firstname,\r\n                    enabledMails: false,\r\n                    email: email \r\n                }\r\n            };\r\n\r\n            Accounts.createUser(options);\r\n        }\r\n    },\r\n    \"users.updateProfile\"(email, lastname, firstname){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            emails: [{address: email, verified: true}],\r\n            'profile.lastname': lastname,\r\n            'profile.firstname': firstname,\r\n            'profile.email': email\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.changePassword'(actualPassword, newPassword){\r\n        let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\r\n        if(checkPassword.error) throw new Meteor.Error(checkPassword.error.reason)\r\n        else{\r\n            Accounts.setPassword(Meteor.userId(), newPassword, {logout: false});\r\n        }\r\n    },\r\n    'users.setEnabledMails'(enabledMails){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            'profile.enabledMails': enabledMails\r\n        }});\r\n    },\r\n    'users.remove'(){\r\n        Meteor.users.remove(Meteor.userId());\r\n    }\r\n})","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Activities = new Mongo.Collection('activities')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nActivitySchema = new SimpleSchema({\r\n    ActivityId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    ActivityType: {\r\n        type: String,\r\n        label: \"Type\",\r\n    },\r\n    ActivityDescription: {\r\n        type: String,\r\n        label: \"Description\"\r\n    },\r\n    ActivityUser: {\r\n        type: Object,\r\n        label: \"User\"\r\n    },\r\n    ActivityElement: {\r\n        type: Object,\r\n        label: \"Element\"\r\n    },\r\n    ActivityCreatedAt:{\r\n        type: Date,\r\n        autoValue: function(){return new Date();}\r\n    }\r\n});\r\n\r\nActivities.attachSchema(ActivitySchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Attachments = new Mongo.Collection('attachments')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nAttachmentSchema = new SimpleSchema({\r\n    attachmentId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    attachmentContent: {\r\n        type: String,\r\n        label: \"Content\",\r\n        required: true\r\n    },\r\n    attachmentCreatedAt:{\r\n        type: Date,\r\n        autoValue: function(){return new Date();}\r\n    }\r\n});\r\n\r\nAttachments.attachSchema(AttachmentSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Boards = new Mongo.Collection('boards')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nBoardSchema = new SimpleSchema({\r\n  boardId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  boardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  boardUser: {\r\n      type: Array,\r\n      label: \"Users\",\r\n      required: true\r\n  },\r\n  'boardUser.$': Object, //se if need to replace Object with a schema\r\n  boardPrivacy: {\r\n      type: SimpleSchema.Integer,\r\n      label: \"Privacy\",\r\n      required: true\r\n  },\r\n  boardList: {\r\n      type: Array,\r\n      label: \"Lists\",\r\n      defaultValue: []\r\n  },\r\n  'boardList.$': Object, //se if need to replace Object with a schema\r\n  boardTag: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'boardTag.$': Object, //se if need to replace Object with a schema\r\n  boardTeam: {\r\n      type: Array,\r\n      label: \"Teams\",\r\n      defaultValue: []\r\n  },\r\n  'boardTeam.$': Object, //se if need to replace Object with a schema\r\n  boardCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nBoards.attachSchema(BoardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Cards = new Mongo.Collection('cards')\r\n\r\nCardSchema = new SimpleSchema({\r\n  cardId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  cardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  cardDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      defaultValue: []\r\n  },\r\n  cardTag: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'cardTag.$': Object, //se if need to replace Object with a schema\r\n  cardComment: {\r\n      type: Array,\r\n      label: \"Comments\",\r\n      defaultValue: []\r\n  },\r\n  'cardComment.$': Object, //se if need to replace Object with a schema\r\n  cardAttachment: {\r\n      type: Array,\r\n      label: \"Attachments\",\r\n      defaultValue: []\r\n  },\r\n  'cardAttachment.$': Object, //se if need to replace Object with a schema\r\n  cardChecklist: {\r\n      type: Array,\r\n      label: \"CheckLists\",\r\n      defaultValue: []\r\n  },\r\n  'cardChecklist.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nCards.attachSchema(CardSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const CheckLists = new Mongo.Collection('checklists')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nCheckListSchema = new SimpleSchema({\r\n  checkListId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  checkListContent: {\r\n      type: Array,\r\n      label: \"Content\",\r\n      defaultValue: []\r\n  },\r\n  \"checkListContent.$\" : Object, //see if need to replace Object with a schema\r\n  checkListCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nCheckLists.attachSchema(CheckListSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const CheckLists = new Mongo.Collection('checklists')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nCheckListSchema = new SimpleSchema({\r\n    checkListId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    checkListContent: {\r\n        type: Array,\r\n        label: \"Content\",\r\n        defaultValue: {}\r\n    },\r\n    \"checkListContent.$\" : Object, //see if need to replace Object with a schema\r\n    checkListCreatedAt:{\r\n        type: Date,\r\n        autoValue: function(){return new Date();}\r\n    }\r\n});\r\n\r\nCheckLists.attachSchema(CheckListSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Comments = new Mongo.Collection('comments')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nCommentSchema = new SimpleSchema({\r\n    commentId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    commentContent: {\r\n        type: String,\r\n        label: \"Content\",\r\n        required: true\r\n    },\r\n    commentUser:{\r\n        type: Object,\r\n        label: \"User\"\r\n    },\r\n    commentCreatedAt:{\r\n        type: Date,\r\n        autoValue: function(){return new Date();}\r\n    }\r\n});\r\n\r\nComments.attachSchema(CommentSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Lists = new Mongo.Collection('lists')\r\n\r\nListSchema = new SimpleSchema({\r\n  listId: {\r\n    type: String,\r\n    label: \"Id\",\r\n    regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  listTitle: {\r\n    type: String,\r\n    label: \"Title\",\r\n    required: true\r\n  },\r\n  listCard:{\r\n    type: Array,\r\n    label: \"Cards\",\r\n    defaultValue: []\r\n  },\r\n  'listCard.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nLists.attachSchema(ListSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Notifications = new Mongo.Collection('notifications')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nNotificationSchema = new SimpleSchema({\r\n  NotificationId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  NotificationContent: {\r\n      type: String,\r\n      label: \"Content\",\r\n      defaultValue: []\r\n  },\r\n  NotificationUser: {\r\n      type: Object,\r\n      label: \"User\"\r\n  },\r\n  NotificationAcivity: {\r\n      type: Object,\r\n      label: \"Activity\"\r\n  },\r\n  NotificationCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nNotifications.attachSchema(NotificationSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Rights = new Mongo.Collection('rights')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nRightSchema = new SimpleSchema({\r\n    RightId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    RightName: {\r\n        type: String,\r\n        label: \"Name\",\r\n    }\r\n});\r\n\r\nRights.attachSchema(RightSchema);","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Tags = new Mongo.Collection('tags')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nTagSchema = new SimpleSchema({\r\n    tagId: {\r\n        type: String,\r\n        label: \"Id\",\r\n        regEx: SimpleSchema.RegEx.Id\r\n    },\r\n    tagTitle: {\r\n        type: String,\r\n        label: \"Title\",\r\n        required: true\r\n    },\r\n    tagCreatedAt:{\r\n        type: Date,\r\n        autoValue: function(){return new Date();}\r\n    }\r\n});\r\n\r\nTags.attachSchema(TagSchema);","import { Mongo } from 'meteor/mongo'\r\nimport {User} from './Users.js'\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nexport const Teams = new Mongo.Collection('teams')\r\n\r\n\r\nconst TeamSchema = new SimpleSchema({\r\n  teamId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  teamName: {\r\n      type: String,\r\n      label: \"Name\",\r\n  },\r\n  teamDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      defaultValue: \"\"\r\n  },\r\n  teamOwner : {\r\n    type: String,\r\n    label: \"Owner\"\r\n},\r\n  teamMembers:{\r\n      type: Array,\r\n      label: \"Members\",\r\n      defaultValue: []\r\n  },\r\n  \"teamMembers.$\" : User, //see if need to replace Object with a schema\r\n  teamCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nTeams.attachSchema(TeamSchema);","import { Mongo } from 'meteor/mongo'\r\nimport { SimpleSchema } from 'simpl-schema/dist/SimpleSchema';\r\n\r\nexport const User = new SimpleSchema({\r\n    name:{\r\n        type:String\r\n    }\r\n})","import { Meteor } from 'meteor/meteor';\r\n\r\nimport './api/users.js';\r\n\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\nimport  SimpleSchema  from 'simpl-schema';\r\nimport {Team}  from \"./models//Team\"\r\nimport {Board} from \"./models/Boards.js\";\r\nimport {Users} from './models/Users'\r\nimport Card from \"./models/Card.js\"\r\n\r\nMeteor.startup(() => {\r\n    require(\"./api/BoardsRoutes\")\r\n    require(\"./api/ListsRoutes\")\r\n    require(\"./api/teams\")\r\n    JsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n        console.log(req)\r\n        Card.insert({\r\n            cardtitle: \"oui\",\r\n            description: \"non\"\r\n        })\r\n        JsonRoutes.sendResult(res, {\r\n            data: {\r\n                result: Card.find().fetch()\r\n            }\r\n        });\r\n    });\r\n});"]}}]
[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nECMAScript = Package.ecmascript.ECMAScript;\nRestivus = Package['nimble:restivus'].Restivus;\nCollection2 = Package['aldeed:collection2'].Collection2;\nSimpleRest = Package['simple:rest'].SimpleRest;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"api\":{\"Utils\":{\"boardUtils.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/Utils/boardUtils.js                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  boardUtils: () => boardUtils\n});\n\nclass boardUtils {\n  static checkInBoardUser(idUser, board) {\n    let isIn = false;\n    board.boardUsers.map(user => {\n      if (user._id == idUser) {\n        isIn = true;\n      }\n    });\n    return isIn;\n  }\n\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"boards.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/boards.js                                                                                          //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Boards;\nmodule.link(\"../models/Boards\", {\n  Boards(v) {\n    Boards = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet boardUtils;\nmodule.link(\"./Utils/boardUtils\", {\n  boardUtils(v) {\n    boardUtils = v;\n  }\n\n}, 2);\nlet rusFunction;\nmodule.link(\"rus-diff\", {\n  default(v) {\n    rusFunction = v;\n  }\n\n}, 3);\nMeteor.publish('boards', function () {\n  return Boards.find();\n});\nMeteor.methods({\n  'boards.createBoard'(board) {\n    console.log(\"test\");\n\n    if (Meteor.userId()) {\n      console.log(board);\n      return Boards.insert(board);\n    } else {\n      throw Meteor.Error(401, \"You are not authentificated\");\n    }\n  },\n\n  'boards.getBoard'(idBoard) {\n    let board;\n    let countDoc = Boards.find({\n      \"boardId\": idBoard\n    }).count();\n    console.log(countDoc);\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": idBoard\n      }); //if(board.boardPrivacy == 1){\n      //  if(Meteor.userId()){\n      //    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n      //      return board\n      //}else{\n      //  return Meteor.Error(403, \"You are not on this allow to see this board\")\n      //}\n      //}else{\n      //    return Meteor.Error(401, \"You are not authentificated\")\n      //}\n      //}else{\n\n      return board; //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  /*'boards.getBoardFromExt' (idBoard,token) {\r\n      let decodedToken = \"xd\"\r\n      let board;\r\n      let countDoc = Boards.find({\"_id\": idBoard}).count();\r\n      console.log(countDoc)\r\n      if (countDoc === 1) {\r\n          board = Boards.findOne({\"boardId\": idBoard});\r\n          if(board.boardPrivacy == 1){\r\n              if(token.userId){\r\n                  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                      return board\r\n                  }else{\r\n                      return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                  }\r\n                }else{\r\n                  return Meteor.Error(401, \"You are not authentificated\")\r\n              }\r\n          }\r\n          return board;\r\n      } else {\r\n          throw new Meteor.Error(404, 'Board not found')\r\n      }\r\n  },*/\n  'boards.removeBoard'(boardId) {\n    let board;\n    let countDoc = Boards.find({\n      \"_id\": boardId\n    }).count(); //console.log(countDoc)\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return Boards.remove(boardId); //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'boards.editBoard'(newBoard) {\n    let countDoc = Boards.find({\n      \"boardId\": newBoard.boardId\n    }).count();\n\n    if (countDoc === 1) {\n      console.log(\"In\");\n      console.log(newBoard.boardList[0].listCard[0]);\n      Boards.update({\n        boardId: newBoard.boardId\n      }, {\n        $set: {\n          boardTitle: newBoard.boardTitle,\n          boardPrivacy: newBoard.privacy,\n          boardUsers: newBoard.boardUsers\n        }\n      });\n      /*newBoard.boardList.forEach((list) => {\r\n               Boards.update({boardId: newBoard.boardId, 'boardList.listId': list.listId}, {\r\n                   $set: {\r\n                       \"boardList.list.listCard.$[]\": list.listCard,\r\n                   }\r\n                 })\r\n           })*/\n\n      /*newBoard.boardList.forEach((list) => {\r\n          Boards.update({boardId: newBoard.boardId, \"boardList.listId\": list.listId}, {\r\n              $set: {\r\n                  boardTitle: newBoard.boardTitle,\r\n                  boardPrivacy: newBoard.privacy,\r\n              }\r\n          })\r\n      })*/\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'board.getAllBoards'() {\n    return Boards.find().fetch();\n  },\n\n  'board.getUserAllBoards'(userId) {\n    let allBoards = Boards.find().fetch();\n    let userBoard = [];\n    allBoards.map(board => {\n      if (boardUtils.checkInBoardUser(userId)) {\n        userBoard.push(board);\n      }\n    });\n    return allBoards;\n  },\n\n  'board.getTeam'(boardId) {\n    let board;\n    let countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return board.boardTeams; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'board.getCards'(boardId) {\n    let board;\n    let countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      let cards = [];\n      board.boardList.map(list => {\n        // noinspection JSAnnotator\n        let theList = Meteor.call('getList', list._id);\n        theList.listCard.map(card => {\n          cards.push(card);\n        });\n      });\n      return cards; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'boards.getTags'(boardId) {\n    let board;\n    let countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return board.boardTags; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'boards.getLists'(boardId) {\n    let board;\n    let lists = [];\n    let countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      board.boardList.map(list => {\n        let theList = Meteor.call('list.getList', list._id);\n        lists.push(theList);\n      });\n      return lists; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'board.archiveList'(boardId, listId) {},\n\n  'board.archiveCard'(boardId, cardId) {}\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lists.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/lists.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Lists;\nmodule.link(\"../models/List\", {\n  Lists(v) {\n    Lists = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 3);\nMeteor.methods({\n  'list.createList'(listName) {\n    return Lists.insert({\n      listTitle: listName\n    });\n  },\n\n  'list.getList'(idList) {\n    let countDoc = Lists.find({\n      \"_id\": idList\n    }).count();\n\n    if (countDoc === 1) {\n      let list = List.findOne({\n        \"_id\": idList\n      });\n      return list;\n    } else {\n      throw new Meteor.Error(404, 'List not found');\n    }\n  },\n\n  'list.deleteList'(idBoard, idList) {},\n\n  'list.editList'(list) {},\n\n  'list.getAllList'() {}\n\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"teams.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/teams.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Team;\nmodule.link(\"../models/Team\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"teams.createTeam\"(team) {\n    if (!this.userId) {\n      throw new Meteor.Error('Not-Authorized');\n    } //let teamDescription = description.teamDescription ? description.teamDescription : \"\"\n    //let owner = Meteor.users.findOne(this.userId)\n\n\n    let teamMember = new Array();\n    teamMember.push(team.teamUsers[0].user);\n    return Team.insert({\n      teamName: team.teamTitle,\n      teamDescription: team.teamDescription,\n      teamOwner: this.userId,\n      teamMembers: teamMember\n    });\n  },\n\n  'getTeams'() {\n    //check(teamId,String)\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorised');\n    }\n\n    let teams = Team.find();\n    if (teams) return teams;else throw new Meteor.Error(404, 'Team not found');\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/users.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nMeteor.publish('users', function () {\n  if (this.userId) return Meteor.users.find({\n    _id: {\n      $ne: this.userId\n    }\n  }, {\n    fields: {\n      profile: 1\n    }\n  });\n});\nMeteor.publish('user', function () {\n  return Meteor.users.find({\n    _id: this.userId\n  });\n});\nMeteor.methods({\n  \"users.signUp\"({\n    lastname,\n    firstname,\n    email,\n    password\n  }) {\n    if (password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\");else if (!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\");else {\n      let options = {\n        email: email,\n        password: password,\n        profile: {\n          lastname: lastname,\n          firstname: firstname,\n          enabledMails: false,\n          email: email\n        }\n      };\n      Accounts.createUser(options);\n    }\n  },\n\n  \"users.updateProfile\"(email, lastname, firstname) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        emails: [{\n          address: email,\n          verified: true\n        }],\n        'profile.lastname': lastname,\n        'profile.firstname': firstname,\n        'profile.email': email\n      }\n    });\n    return Meteor.user();\n  },\n\n  'users.changePassword'(actualPassword, newPassword) {\n    let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\n\n    if (checkPassword.error) throw new Meteor.Error(checkPassword.error.reason);else {\n      Accounts.setPassword(Meteor.userId(), newPassword, {\n        logout: false\n      });\n    }\n  },\n\n  'users.setEnabledMails'(enabledMails) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        'profile.enabledMails': enabledMails\n      }\n    });\n    return Meteor.user();\n  },\n\n  'users.remove'() {\n    Meteor.users.remove(Meteor.userId());\n  },\n\n  \"users.getUser\"(email) {\n    return Meteor.users.findOne({\n      \"profile.email\": email\n    });\n  },\n\n  \"users.getUsers\"() {\n    return Meteor.users.find();\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"BoardUser.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/BoardUser.js                                                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  BoardUserSchema: () => BoardUserSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet UserSchema;\nmodule.link(\"./Users\", {\n  UserSchema(v) {\n    UserSchema = v;\n  }\n\n}, 1);\nconst BoardUserSchema = new SimpleSchema({\n  user: {\n    type: UserSchema,\n    label: \"User\",\n    required: true\n  },\n  userRole: {\n    type: Number,\n    label: \"Role\",\n    required: true\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Boards.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Boards.js                                                                                       //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Boards: () => Boards,\n  BoardSchema: () => BoardSchema\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet ListSchema;\nmodule.link(\"./List\", {\n  ListSchema(v) {\n    ListSchema = v;\n  }\n\n}, 2);\nlet BoardUserSchema;\nmodule.link(\"./BoardUser\", {\n  BoardUserSchema(v) {\n    BoardUserSchema = v;\n  }\n\n}, 3);\nconst Boards = new Mongo.Collection('boards');\nconst BoardSchema = new SimpleSchema({\n  boardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  boardDescription: {\n    type: String,\n    label: \"Description\",\n    required: false\n  },\n  boardUsers: {\n    type: Array,\n    label: \"Users\",\n    required: true\n  },\n  'boardUsers.$': BoardUserSchema,\n  //se if need to replace Object with a schema\n  boardPrivacy: {\n    type: SimpleSchema.Integer,\n    label: \"Privacy\",\n    required: true\n  },\n  boardLists: {\n    type: Array,\n    label: \"Lists\",\n    defaultValue: []\n  },\n  'boardLists.$': ListSchema,\n  //se if need to replace Object with a schema\n  boardTags: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'boardTags.$': Object,\n  //se if need to replace Object with a schema\n  boardTeams: {\n    type: Array,\n    label: \"Teams\",\n    defaultValue: []\n  },\n  'boardTeams.$': Object,\n  //se if need to replace Object with a schema\n  boardCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nBoards.attachSchema(BoardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Card.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Card.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Cards: () => Cards,\n  CardSchema: () => CardSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Cards = new Mongo.Collection('cards');\nconst CardSchema = new SimpleSchema({\n  cardId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  cardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  cardDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: []\n  },\n  cardTag: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'cardTag.$': Object,\n  //se if need to replace Object with a schema\n  cardComment: {\n    type: Array,\n    label: \"Comments\",\n    defaultValue: []\n  },\n  'cardComment.$': Object,\n  //se if need to replace Object with a schema\n  cardAttachment: {\n    type: Array,\n    label: \"Attachments\",\n    defaultValue: []\n  },\n  'cardAttachment.$': Object,\n  //se if need to replace Object with a schema\n  cardChecklist: {\n    type: Array,\n    label: \"CheckLists\",\n    defaultValue: []\n  },\n  'cardChecklist.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nCards.attachSchema(CardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"List.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/List.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Lists: () => Lists,\n  ListSchema: () => ListSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet CardSchema;\nmodule.link(\"./Card\", {\n  CardSchema(v) {\n    CardSchema = v;\n  }\n\n}, 2);\nconst Lists = new Mongo.Collection('lists');\nconst ListSchema = new SimpleSchema({\n  listId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  listTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  listCard: {\n    type: Array,\n    label: \"Cards\",\n    defaultValue: []\n  },\n  'listCard.$': CardSchema,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nLists.attachSchema(ListSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Team.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Team.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Team: () => Team\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet UserSchema;\nmodule.link(\"./Users.js\", {\n  UserSchema(v) {\n    UserSchema = v;\n  }\n\n}, 2);\nconst Team = new Mongo.Collection('teams');\nconst TeamSchema = new SimpleSchema({\n  teamName: {\n    type: String,\n    label: \"Name\"\n  },\n  teamDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: \"\"\n  },\n  teamOwner: {\n    type: String,\n    label: \"Owner\"\n  },\n  teamMembers: {\n    type: Array,\n    label: \"Members\",\n    defaultValue: []\n  },\n  'teamMembers.$': UserSchema\n});\nTeam.attachSchema(TeamSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Users.js                                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  UserSchema: () => UserSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nconst UserProfileSchema = new SimpleSchema({\n  firstname: {\n    type: String,\n    optional: true\n  },\n  lastname: {\n    type: String,\n    optional: true\n  },\n  email: {\n    type: String,\n    optional: true\n  },\n  ennabledMails: {\n    type: Boolean,\n    optional: true\n  }\n});\nconst UserSchema = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"emails.$.verified\": {\n    type: Boolean\n  },\n  // Use this registered_emails field if you are using splendido:meteor-accounts-emails-field / splendido:meteor-accounts-meld\n  registered_emails: {\n    type: Array,\n    optional: true\n  },\n  'registered_emails.$': {\n    type: Object,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date\n  },\n  profile: {\n    type: UserProfileSchema,\n    optional: true\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  roles: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Option 2: [String] type\n  // If you are sure you will never need to use role groups, then\n  // you can specify [String] as the type\n  roles: {\n    type: Array,\n    optional: true\n  },\n  'roles.$': {\n    type: String\n  },\n  // In order to avoid an 'Exception in setInterval callback' from Meteor\n  heartbeat: {\n    type: Date,\n    optional: true\n  }\n});\nMeteor.users.attachSchema(UserSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// main.js                                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.link(\"./api/users.js\");\nmodule.link(\"./api/boards\");\nmodule.link(\"./api/lists\");\nmodule.link(\"./api/teams\");\nMeteor.startup(() => {});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["api/Utils/boardUtils.js","api/boards.js","api/lists.js","api/teams.js","api/users.js","models/BoardUser.js","models/Boards.js","models/Card.js","models/List.js","models/Team.js","models/Users.js","main.js"],"names":["module","export","boardUtils","checkInBoardUser","idUser","board","isIn","boardUsers","map","user","_id","Boards","link","v","Meteor","rusFunction","default","publish","find","methods","console","log","userId","insert","Error","idBoard","countDoc","count","findOne","boardId","remove","newBoard","boardList","listCard","update","$set","boardTitle","boardPrivacy","privacy","fetch","allBoards","userBoard","push","boardTeams","cards","list","theList","call","card","boardTags","lists","listId","cardId","Lists","Random","JsonRoutes","listName","listTitle","idList","List","Middleware","use","req","res","next","query","error","sendResult","code","data","result","add","users","username","body","state","firstname","lastname","password","email","Team","team","teamMember","Array","teamUsers","teamName","teamTitle","teamDescription","teamOwner","teamMembers","teams","Accounts","$ne","fields","profile","length","options","enabledMails","createUser","emails","address","verified","actualPassword","newPassword","checkPassword","_checkPassword","reason","setPassword","logout","BoardUserSchema","SimpleSchema","UserSchema","type","label","required","userRole","Number","BoardSchema","Mongo","ListSchema","Collection","String","boardDescription","Integer","boardLists","defaultValue","Object","boardCreatedAt","Date","autoValue","attachSchema","Cards","CardSchema","regEx","RegEx","Id","cardTitle","cardDescription","cardTag","cardComment","cardAttachment","cardChecklist","listCreatedAt","TeamSchema","UserProfileSchema","optional","ennabledMails","Boolean","Email","registered_emails","blackbox","createdAt","services","roles","heartbeat","startup"],"mappings":"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","file":"/app.js","sourcesContent":["export class boardUtils {\r\n\r\n    static checkInBoardUser(idUser, board){\r\n        let isIn = false\r\n        board.boardUsers.map((user) => {\r\n            if(user._id == idUser){\r\n                isIn = true\r\n            }\r\n        })\r\n\r\n        return isIn\r\n    }\r\n}","import {Boards} from \"../models/Boards\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {boardUtils} from \"./Utils/boardUtils\";\r\nimport rusFunction from 'rus-diff'\r\n\r\nMeteor.publish('boards', function () {return Boards.find()});\r\n\r\nMeteor.methods({\r\n\r\n    'boards.createBoard'(board) {\r\n        console.log(\"test\")\r\n        if(Meteor.userId()){\r\n            console.log(board)\r\n            return Boards.insert(board);\r\n        }else{\r\n            throw Meteor.Error(401, \"You are not authentificated\")\r\n        }\r\n    },\r\n\r\n    'boards.getBoard' (idBoard) {\r\n        let board;\r\n        let countDoc = Boards.find({\"boardId\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            //if(board.boardPrivacy == 1){\r\n              //  if(Meteor.userId()){\r\n                //    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                  //      return board\r\n                    //}else{\r\n                      //  return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                    //}\r\n\r\n                //}else{\r\n                //    return Meteor.Error(401, \"You are not authentificated\")\r\n                //}\r\n            //}else{\r\n                return board\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found');\r\n        }\r\n\r\n    },\r\n\r\n    /*'boards.getBoardFromExt' (idBoard,token) {\r\n        let decodedToken = \"xd\"\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            if(board.boardPrivacy == 1){\r\n                if(token.userId){\r\n                    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                        return board\r\n                    }else{\r\n                        return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                    }\r\n\r\n                }else{\r\n                    return Meteor.Error(401, \"You are not authentificated\")\r\n                }\r\n            }\r\n            return board;\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },*/\r\n\r\n    'boards.removeBoard'(boardId) {\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        //console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n              //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                    return Boards.remove(boardId);\r\n                //}else{\r\n                  //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n                //}\r\n\r\n            //}else{\r\n              //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.editBoard' (newBoard) {\r\n        let countDoc = Boards.find({\"boardId\": newBoard.boardId}).count();\r\n        if (countDoc === 1) {\r\n            console.log(\"In\")\r\n            console.log(newBoard.boardList[0].listCard[0])\r\n            Boards.update({boardId: newBoard.boardId}, {\r\n                $set: {\r\n                    boardTitle: newBoard.boardTitle,\r\n                    boardPrivacy: newBoard.privacy,\r\n                    boardUsers: newBoard.boardUsers\r\n                }\r\n\r\n            })\r\n\r\n           /*newBoard.boardList.forEach((list) => {\r\n                    Boards.update({boardId: newBoard.boardId, 'boardList.listId': list.listId}, {\r\n                        $set: {\r\n                            \"boardList.list.listCard.$[]\": list.listCard,\r\n                        }\r\n\r\n                    })\r\n                })*/\r\n\r\n\r\n\r\n            /*newBoard.boardList.forEach((list) => {\r\n                Boards.update({boardId: newBoard.boardId, \"boardList.listId\": list.listId}, {\r\n                    $set: {\r\n                        boardTitle: newBoard.boardTitle,\r\n                        boardPrivacy: newBoard.privacy,\r\n                    }\r\n                })\r\n            })*/\r\n        }else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'board.getAllBoards' (){\r\n        return Boards.find().fetch();\r\n    },\r\n\r\n    'board.getUserAllBoards' (userId){\r\n        let allBoards = Boards.find().fetch()\r\n        let userBoard = []\r\n        allBoards.map((board) => {\r\n            if(boardUtils.checkInBoardUser(userId)){\r\n                userBoard.push(board)\r\n            }\r\n        })\r\n\r\n        return allBoards\r\n\r\n    },\r\n\r\n    'board.getTeam' (boardId){\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            return board.boardTeams;\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n    'board.getCards' (boardId) {\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            let cards = []\r\n            board.boardList.map((list) => {\r\n                // noinspection JSAnnotator\r\n                let theList = Meteor.call('getList',list._id)\r\n                theList.listCard.map((card) => {\r\n                    cards.push(card)\r\n                })\r\n            })\r\n\r\n            return cards\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.getTags' (boardId) {\r\n        let board\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            return board.boardTags\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.getLists' (boardId) {\r\n        let board\r\n        let lists = []\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            board.boardList.map((list) => {\r\n                let theList = Meteor.call('list.getList',list._id)\r\n                lists.push(theList)\r\n            })\r\n            return lists\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n    'board.archiveList' (boardId,listId) {\r\n\r\n    },\r\n\r\n    'board.archiveCard' (boardId, cardId) {\r\n\r\n    }\r\n\r\n})\r\n","import {Lists} from \"../models/List\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\n\r\nMeteor.methods({\r\n    'list.createList'(listName) {\r\n        return Lists.insert({listTitle: listName})\r\n    },\r\n\r\n    'list.getList' (idList) {\r\n        let countDoc = Lists.find({\"_id\": idList}).count();\r\n        if (countDoc === 1) {\r\n            let list = List.findOne({\"_id\": idList});\r\n            return list;\r\n        } else {\r\n            throw new Meteor.Error(404, 'List not found')\r\n        }\r\n\r\n    },\r\n    'list.deleteList'(idBoard, idList) {\r\n\r\n    },\r\n\r\n    'list.editList' (list) {\r\n\r\n    },\r\n\r\n    'list.getAllList' (){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n","import {Meteor} from \"meteor/meteor\";\r\nimport {Team}  from \"../models/Team\";\r\n\r\nMeteor.methods({\r\n    \"teams.createTeam\"(team){\r\n        if(!this.userId){\r\n            throw new Meteor.Error('Not-Authorized');\r\n        }\r\n        //let teamDescription = description.teamDescription ? description.teamDescription : \"\"\r\n        //let owner = Meteor.users.findOne(this.userId)\r\n       let teamMember = new Array();\r\n       teamMember.push(team.teamUsers[0].user)\r\n      \r\n        return Team.insert({\r\n            teamName: team.teamTitle,\r\n            teamDescription: team.teamDescription,\r\n            teamOwner : this.userId,\r\n            teamMembers : teamMember\r\n        });\r\n\r\n    },\r\n\r\n    'getTeams'(){\r\n        //check(teamId,String)\r\n       if(!this.userId){\r\n            throw new Meteor.Error('not-authorised');\r\n        }\r\n\r\n        let teams = Team.find();\r\n\r\n        if(teams)\r\n            return teams\r\n        else\r\n          throw new Meteor.Error(404, 'Team not found')\r\n    }\r\n\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\n\r\nMeteor.publish('users', function(){\r\n    if(this.userId) return Meteor.users.find({_id: {$ne: this.userId}}, {fields: { profile: 1 }});\r\n});\r\n\r\nMeteor.publish('user', function () {\r\n    return Meteor.users.find({_id: this.userId});\r\n});\r\n\r\nMeteor.methods({\r\n    \"users.signUp\"({lastname, firstname, email, password}){\r\n        if(password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\")\r\n        else if(!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\")\r\n        else {\r\n            let options = {\r\n                email: email,\r\n                password: password,\r\n                profile: {\r\n                    lastname: lastname,\r\n                    firstname: firstname,\r\n                    enabledMails: false,\r\n                    email: email \r\n                }\r\n            };\r\n\r\n            Accounts.createUser(options);\r\n        }\r\n    },\r\n    \"users.updateProfile\"(email, lastname, firstname){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            emails: [{address: email, verified: true}],\r\n            'profile.lastname': lastname,\r\n            'profile.firstname': firstname,\r\n            'profile.email': email\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.changePassword'(actualPassword, newPassword){\r\n        let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\r\n        if(checkPassword.error) throw new Meteor.Error(checkPassword.error.reason)\r\n        else{\r\n            Accounts.setPassword(Meteor.userId(), newPassword, {logout: false});\r\n        }\r\n    },\r\n    'users.setEnabledMails'(enabledMails){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            'profile.enabledMails': enabledMails\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.remove'(){\r\n        Meteor.users.remove(Meteor.userId());\r\n    },\r\n    \"users.getUser\"(email){\r\n        return Meteor.users.findOne({\"profile.email\": email});\r\n    },\r\n    \"users.getUsers\"(){\r\n        return Meteor.users.find();\r\n    }\r\n})","import SimpleSchema from 'simpl-schema';\r\nimport { UserSchema } from './Users';\r\n\r\nexport const BoardUserSchema = new SimpleSchema({\r\n  user: {\r\n      type: UserSchema,\r\n      label: \"User\",\r\n      required: true\r\n  },\r\n  userRole: {\r\n      type: Number,\r\n      label: \"Role\",\r\n      required: true\r\n  }\r\n});","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Boards = new Mongo.Collection('boards')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\nimport {ListSchema} from \"./List\";\r\nimport { BoardUserSchema } from './BoardUser';\r\n\r\nexport const BoardSchema = new SimpleSchema({\r\n  boardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  boardDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      required: false\r\n  },\r\n  boardUsers: {\r\n      type: Array,\r\n      label: \"Users\",\r\n      required: true\r\n  },\r\n  'boardUsers.$': BoardUserSchema, //se if need to replace Object with a schema\r\n  boardPrivacy: {\r\n      type: SimpleSchema.Integer,\r\n      label: \"Privacy\",\r\n      required: true\r\n  },\r\n  boardLists: {\r\n      type: Array,\r\n      label: \"Lists\",\r\n      defaultValue: []\r\n  },\r\n  'boardLists.$': ListSchema, //se if need to replace Object with a schema\r\n\r\n    boardTags: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'boardTags.$': Object, //se if need to replace Object with a schema\r\n  boardTeams: {\r\n      type: Array,\r\n      label: \"Teams\",\r\n      defaultValue: []\r\n  },\r\n  'boardTeams.$': Object, //se if need to replace Object with a schema\r\n  boardCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nBoards.attachSchema(BoardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Cards = new Mongo.Collection('cards')\r\n\r\nexport const CardSchema = new SimpleSchema({\r\n  cardId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  cardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  cardDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      defaultValue: []\r\n  },\r\n  cardTag: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'cardTag.$': Object, //se if need to replace Object with a schema\r\n  cardComment: {\r\n      type: Array,\r\n      label: \"Comments\",\r\n      defaultValue: []\r\n  },\r\n  'cardComment.$': Object, //se if need to replace Object with a schema\r\n  cardAttachment: {\r\n      type: Array,\r\n      label: \"Attachments\",\r\n      defaultValue: []\r\n  },\r\n  'cardAttachment.$': Object, //se if need to replace Object with a schema\r\n  cardChecklist: {\r\n      type: Array,\r\n      label: \"CheckLists\",\r\n      defaultValue: []\r\n  },\r\n  'cardChecklist.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nCards.attachSchema(CardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\nimport {CardSchema} from \"./Card\";\r\n\r\nexport const Lists = new Mongo.Collection('lists')\r\n\r\nexport const ListSchema = new SimpleSchema({\r\n  listId: {\r\n    type: String,\r\n    label: \"Id\",\r\n    regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  listTitle: {\r\n    type: String,\r\n    label: \"Title\",\r\n    required: true\r\n  },\r\n  listCard:{\r\n    type: Array,\r\n    label: \"Cards\",\r\n    defaultValue: []\r\n  },\r\n  'listCard.$': CardSchema, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nLists.attachSchema(ListSchema);","import { Mongo } from 'meteor/mongo'\r\nimport SimpleSchema from 'simpl-schema';\r\nimport {UserSchema} from './Users.js'\r\n\r\nexport const Team = new Mongo.Collection('teams');\r\n\r\nconst TeamSchema = new SimpleSchema({\r\n    teamName: {\r\n        type: String,\r\n        label: \"Name\",\r\n    },\r\n    teamDescription: {\r\n        type: String,\r\n        label: \"Description\",\r\n        defaultValue: \"\" \r\n    },\r\n    teamOwner : {\r\n        type: String,\r\n        label: \"Owner\"\r\n    },\r\n    teamMembers:{\r\n        type: Array,\r\n        label : \"Members\",\r\n        defaultValue: []\r\n    },\r\n    'teamMembers.$': UserSchema\r\n});\r\n\r\n\r\nTeam.attachSchema(TeamSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nconst UserProfileSchema = new SimpleSchema({\r\n    firstname: {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    lastname: {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    email : {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    ennabledMails: {\r\n        type: Boolean,\r\n        optional: true\r\n    }\r\n});\r\n\r\nexport const UserSchema = new SimpleSchema({\r\n    username: {\r\n        type: String,\r\n        // For accounts-password, either emails or username is required, but not both. It is OK to make this\r\n        // optional here because the accounts-password package does its own validation.\r\n        // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\r\n        optional: true\r\n    },\r\n    emails: {\r\n        type: Array,\r\n        // For accounts-password, either emails or username is required, but not both. It is OK to make this\r\n        // optional here because the accounts-password package does its own validation.\r\n        // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\r\n        optional: true\r\n    },\r\n    \"emails.$\": {\r\n        type: Object\r\n    },\r\n    \"emails.$.address\": {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Email\r\n    },\r\n    \"emails.$.verified\": {\r\n        type: Boolean\r\n    },\r\n    // Use this registered_emails field if you are using splendido:meteor-accounts-emails-field / splendido:meteor-accounts-meld\r\n    registered_emails: {\r\n        type: Array,\r\n        optional: true\r\n    },\r\n    'registered_emails.$': {\r\n        type: Object,\r\n        blackbox: true\r\n    },\r\n    createdAt: {\r\n        type: Date\r\n    },\r\n    profile: {\r\n        type: UserProfileSchema,\r\n        optional: true\r\n    },\r\n    // Make sure this services field is in your schema if you're using any of the accounts packages\r\n    services: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true\r\n    },\r\n    // Add `roles` to your schema if you use the meteor-roles package.\r\n    // Option 1: Object type\r\n    // If you specify that type as Object, you must also specify the\r\n    // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\r\n    // Example:\r\n    // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\r\n    // You can't mix and match adding with and without a group since\r\n    // you will fail validation in some cases.\r\n    roles: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true\r\n    },\r\n    // Option 2: [String] type\r\n    // If you are sure you will never need to use role groups, then\r\n    // you can specify [String] as the type\r\n    roles: {\r\n        type: Array,\r\n        optional: true\r\n    },\r\n    'roles.$': {\r\n        type: String\r\n    },\r\n    // In order to avoid an 'Exception in setInterval callback' from Meteor\r\n    heartbeat: {\r\n        type: Date,\r\n        optional: true\r\n    }\r\n});\r\n\r\nMeteor.users.attachSchema(UserSchema);","import { Meteor } from 'meteor/meteor';\r\n\r\nimport './api/users.js';\r\nimport './api/boards';\r\nimport './api/lists';\r\nimport './api/teams' \r\n\r\nMeteor.startup(() => {\r\n\r\n});"]}}]
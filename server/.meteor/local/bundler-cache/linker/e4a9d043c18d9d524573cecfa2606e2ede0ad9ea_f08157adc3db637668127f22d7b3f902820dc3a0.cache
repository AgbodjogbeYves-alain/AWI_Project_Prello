[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nECMAScript = Package.ecmascript.ECMAScript;\nRestivus = Package['nimble:restivus'].Restivus;\nCollection2 = Package['aldeed:collection2'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"api\":{\"BoardsRoutes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/BoardsRoutes.js                                                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Boards;\nmodule.link(\"../models/Boards\", {\n  Boards(v) {\n    Boards = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 3);\nMeteor.methods({\n  'createBoard'({\n    boardName,\n    privacy\n  }) {\n    /*if(!Meteor.userId()){\r\n        throw new Meteor.Error('Not Authorized')\r\n    }else{*/\n    let privacyInt = parseInt(privacy);\n    let id = Random.id();\n    return Boards.insert({\n      boardId: id,\n      boardTitle: boardName,\n      boardPrivacy: privacyInt,\n      boardUser: [Meteor.user()]\n    });\n  },\n\n  'getBoard'({\n    idBoard\n  }) {\n    let board;\n    let countDoc = Boards.find({\n      \"boardId\": idBoard\n    }).count();\n    console.log(countDoc);\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": idBoard\n      });\n      return board;\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'deleteBoard'({\n    idBoard\n  }) {},\n\n  'editBoard'({\n    idBoard,\n    newParams\n  }) {},\n\n  'getAllBoards'({\n    idUser\n  }) {}\n\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ListsRoutes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/ListsRoutes.js                                                                                     //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Lists;\nmodule.link(\"../models/List\", {\n  Lists(v) {\n    Lists = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 3);\nMeteor.methods({\n  'createList'(listName) {\n    let id = Random.id();\n    return Lists.insert({\n      listId: id,\n      listTitle: listName\n    });\n  },\n\n  'getList'(idList) {\n    let countDoc = Lists.find({\n      \"listId\": idList\n    }).count();\n\n    if (countDoc === 1) {\n      list = List.findOne({\n        \"listId\": idList\n      });\n      return list;\n    } else {\n      throw new Meteor.Error(404, 'List not found');\n    }\n  },\n\n  'deleteList'({\n    idBoard\n  }) {},\n\n  'editList'({\n    idBoard,\n    newParams\n  }) {},\n\n  'getAllList'({\n    idUser\n  }) {}\n\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"teams.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/teams.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Team;\nmodule.link(\"../models/Team\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 1);\n\n/*if(Meteor.isServer) {\r\n    Meteor.publish('teams', function teamsPublication() {\r\n        return Teams.find({\r\n            $or: [\r\n                {teamMember : {$in : [this.userId]}},\r\n                {teamOwner: this.userID},\r\n            ]\r\n        })\r\n    });\r\n}\r\n*/\nMeteor.methods({\n  \"createTeam\"({\n    teamName,\n    description\n  }) {\n    if (!this.userId) {\n      throw new Meteor.Error('Not-Authorized');\n    }\n\n    let teamDescription = description ? description : \"\"; //let owner = Meteor.users.findOne(this.userId)\n\n    return Team.insert({\n      teamName: teamName,\n      teamDescription: teamDescription,\n      teamOwner: this.userId\n    });\n  },\n\n  'getTeams'() {\n    //check(teamId,String)\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorised');\n    }\n\n    let teams = Team.find();\n    if (teams) return teams;else throw new Meteor.Error(404, 'Team not found');\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// api/users.js                                                                                           //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"users.signUp\"(lastname, firstname, email, password) {\n    if (password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\");else if (!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\");else {\n      let options = {\n        email: email,\n        password: password,\n        profile: {\n          lastname: lastname,\n          firstname: firstname,\n          enabledMails: false,\n          email: email\n        }\n      };\n      Accounts.createUser(options);\n    }\n  },\n\n  \"users.updateProfile\"(email, lastname, firstname) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        emails: [{\n          address: email,\n          verified: true\n        }],\n        'profile.lastname': lastname,\n        'profile.firstname': firstname,\n        'profile.email': email\n      }\n    });\n    return Meteor.user();\n  },\n\n  'users.changePassword'(actualPassword, newPassword) {\n    let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\n\n    if (checkPassword.error) throw new Meteor.Error(checkPassword.error.reason);else {\n      Accounts.setPassword(Meteor.userId(), newPassword, {\n        logout: false\n      });\n    }\n  },\n\n  'users.setEnabledMails'(enabledMails) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        'profile.enabledMails': enabledMails\n      }\n    });\n  },\n\n  'users.remove'() {\n    Meteor.users.remove(Meteor.userId());\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"Boards.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Boards.js                                                                                       //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Boards: () => Boards\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nconst Boards = new Mongo.Collection('boards');\nBoardSchema = new SimpleSchema({\n  boardId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  boardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  boardUser: {\n    type: Array,\n    label: \"Users\",\n    required: true\n  },\n  'boardUser.$': Object,\n  //se if need to replace Object with a schema\n  boardPrivacy: {\n    type: SimpleSchema.Integer,\n    label: \"Privacy\",\n    required: true\n  },\n  boardList: {\n    type: Array,\n    label: \"Lists\",\n    defaultValue: []\n  },\n  'boardList.$': Object,\n  //se if need to replace Object with a schema\n  boardTag: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'boardTag.$': Object,\n  //se if need to replace Object with a schema\n  boardTeam: {\n    type: Array,\n    label: \"Teams\",\n    defaultValue: []\n  },\n  'boardTeam.$': Object,\n  //se if need to replace Object with a schema\n  boardCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nBoards.attachSchema(BoardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Card.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Card.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Cards: () => Cards\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Cards = new Mongo.Collection('cards');\nCardSchema = new SimpleSchema({\n  cardId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  cardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  cardDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: []\n  },\n  cardTag: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'cardTag.$': Object,\n  //se if need to replace Object with a schema\n  cardComment: {\n    type: Array,\n    label: \"Comments\",\n    defaultValue: []\n  },\n  'cardComment.$': Object,\n  //se if need to replace Object with a schema\n  cardAttachment: {\n    type: Array,\n    label: \"Attachments\",\n    defaultValue: []\n  },\n  'cardAttachment.$': Object,\n  //se if need to replace Object with a schema\n  cardChecklist: {\n    type: Array,\n    label: \"CheckLists\",\n    defaultValue: []\n  },\n  'cardChecklist.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nCards.attachSchema(CardSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"List.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/List.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Lists: () => Lists\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Lists = new Mongo.Collection('lists');\nListSchema = new SimpleSchema({\n  listId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  listTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  listCard: {\n    type: Array,\n    label: \"Cards\",\n    defaultValue: []\n  },\n  'listCard.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nLists.attachSchema(ListSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Team.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Team.js                                                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  Teams: () => Teams\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet User;\nmodule.link(\"./Users.js\", {\n  User(v) {\n    User = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nconst Teams = new Mongo.Collection('teams');\nconst TeamSchema = new SimpleSchema({\n  teamId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  teamName: {\n    type: String,\n    label: \"Name\"\n  },\n  teamDescription: {\n    type: String,\n    label: \"Description\",\n    defaultValue: \"\"\n  },\n  teamOwner: {\n    type: String,\n    label: \"Owner\"\n  },\n  teamMembers: {\n    type: Array,\n    label: \"Members\",\n    defaultValue: []\n  },\n  \"teamMembers.$\": User,\n  //see if need to replace Object with a schema\n  teamCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nTeams.attachSchema(TeamSchema);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// models/Users.js                                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({\n  User: () => User\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema/dist/SimpleSchema\", {\n  SimpleSchema(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nconst User = new SimpleSchema({\n  name: {\n    type: String\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// main.js                                                                                                //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.link(\"./api/users.js\");\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nlet Team;\nmodule.link(\"./models//Team\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 3);\nlet Board;\nmodule.link(\"./models/Boards.js\", {\n  Board(v) {\n    Board = v;\n  }\n\n}, 4);\nlet Users;\nmodule.link(\"./models/Users\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 5);\nlet Card;\nmodule.link(\"./models/Card.js\", {\n  default(v) {\n    Card = v;\n  }\n\n}, 6);\nMeteor.startup(() => {\n  require(\"./api/BoardsRoutes\");\n\n  require(\"./api/ListsRoutes\");\n\n  require(\"./api/teams\");\n\n  JsonRoutes.add('post', '/signUp/', function (req, res, next) {\n    console.log(req);\n    Card.insert({\n      cardtitle: \"oui\",\n      description: \"non\"\n    });\n    JsonRoutes.sendResult(res, {\n      data: {\n        result: Card.find().fetch()\n      }\n    });\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["api/BoardsRoutes.js","api/ListsRoutes.js","api/teams.js","api/users.js","models/Boards.js","models/Card.js","models/List.js","models/Team.js","models/Users.js","main.js"],"names":["Boards","module","link","v","Meteor","Random","JsonRoutes","methods","boardName","privacy","privacyInt","parseInt","id","insert","boardId","boardTitle","boardPrivacy","boardUser","user","idBoard","board","countDoc","find","count","console","log","findOne","Error","newParams","idUser","Middleware","use","req","res","next","query","error","sendResult","code","data","result","add","users","username","body","state","firstname","lastname","password","email","fetch","Lists","listName","listId","listTitle","idList","list","List","Team","teamName","description","userId","teamDescription","teamOwner","teams","Accounts","length","options","profile","enabledMails","createUser","update","$set","emails","address","verified","actualPassword","newPassword","checkPassword","_checkPassword","reason","setPassword","logout","remove","export","Mongo","SimpleSchema","default","Collection","BoardSchema","type","String","label","regEx","RegEx","Id","required","Array","Object","Integer","boardList","defaultValue","boardTag","boardTeam","boardCreatedAt","Date","autoValue","attachSchema","Cards","CardSchema","cardId","cardTitle","cardDescription","cardTag","cardComment","cardAttachment","cardChecklist","listCreatedAt","ListSchema","listCard","Teams","User","TeamSchema","teamId","teamMembers","teamCreatedAt","name","Board","Users","Card","startup","require","cardtitle"],"mappings":"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","file":"/app.js","sourcesContent":["import {Boards} from \"../models/Boards\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\nMeteor.methods({\r\n    'createBoard'({boardName, privacy}) {\r\n        /*if(!Meteor.userId()){\r\n            throw new Meteor.Error('Not Authorized')\r\n        }else{*/\r\n        let privacyInt = parseInt(privacy)\r\n        let id = Random.id();\r\n        return Boards.insert({boardId: id, boardTitle: boardName, boardPrivacy: privacyInt, boardUser: [Meteor.user()]})\r\n    },\r\n\r\n    'getBoard' ({idBoard}) {\r\n        let board;\r\n        let countDoc = Boards.find({\"boardId\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            return board;\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n\r\n    },\r\n    'deleteBoard'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editBoard' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllBoards' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n\r\n","import {Lists} from \"../models/List\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\n\r\nMeteor.methods({\r\n    'createList'(listName) {\r\n        let id = Random.id();\r\n        return Lists.insert({listId: id, listTitle: listName})\r\n    },\r\n\r\n    'getList' (idList) {\r\n        let countDoc = Lists.find({\"listId\": idList}).count();\r\n        if (countDoc === 1) {\r\n            list = List.findOne({\"listId\": idList});\r\n            return list;\r\n        } else {\r\n            throw new Meteor.Error(404, 'List not found')\r\n        }\r\n\r\n    },\r\n    'deleteList'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editList' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllList' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n\r\n","import {Meteor} from \"meteor/meteor\";\r\nimport {Team}  from \"../models/Team\";\r\n\r\n\r\n\r\n/*if(Meteor.isServer) {\r\n    Meteor.publish('teams', function teamsPublication() {\r\n        return Teams.find({\r\n            $or: [\r\n                {teamMember : {$in : [this.userId]}},\r\n                {teamOwner: this.userID},\r\n            ]\r\n        })\r\n    });\r\n}\r\n*/\r\nMeteor.methods({\r\n    \"createTeam\"({teamName,description}){\r\n        if(!this.userId){\r\n            throw new Meteor.Error('Not-Authorized');\r\n        }\r\n        let teamDescription = description ? description : \"\"\r\n        //let owner = Meteor.users.findOne(this.userId)\r\n        \r\n        return Team.insert({\r\n            teamName: teamName,\r\n            teamDescription: teamDescription,\r\n            teamOwner : this.userId\r\n        });\r\n\r\n    },\r\n\r\n    'getTeams'(){\r\n        //check(teamId,String)\r\n       if(!this.userId){\r\n            throw new Meteor.Error('not-authorised');\r\n        }\r\n\r\n        let teams = Team.find();\r\n\r\n        if(teams)\r\n            return teams\r\n        else\r\n          throw new Meteor.Error(404, 'Team not found')\r\n    }\r\n\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\n\r\nMeteor.methods({\r\n    \"users.signUp\"(lastname, firstname, email, password){\r\n        if(password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\")\r\n        else if(!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\")\r\n        else {\r\n            let options = {\r\n                email: email,\r\n                password: password,\r\n                profile: {\r\n                    lastname: lastname,\r\n                    firstname: firstname,\r\n                    enabledMails: false,\r\n                    email: email \r\n                }\r\n            };\r\n\r\n            Accounts.createUser(options);\r\n        }\r\n    },\r\n    \"users.updateProfile\"(email, lastname, firstname){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            emails: [{address: email, verified: true}],\r\n            'profile.lastname': lastname,\r\n            'profile.firstname': firstname,\r\n            'profile.email': email\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.changePassword'(actualPassword, newPassword){\r\n        let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\r\n        if(checkPassword.error) throw new Meteor.Error(checkPassword.error.reason)\r\n        else{\r\n            Accounts.setPassword(Meteor.userId(), newPassword, {logout: false});\r\n        }\r\n    },\r\n    'users.setEnabledMails'(enabledMails){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            'profile.enabledMails': enabledMails\r\n        }});\r\n    },\r\n    'users.remove'(){\r\n        Meteor.users.remove(Meteor.userId());\r\n    }\r\n})","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Boards = new Mongo.Collection('boards')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nBoardSchema = new SimpleSchema({\r\n  boardId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  boardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  boardUser: {\r\n      type: Array,\r\n      label: \"Users\",\r\n      required: true\r\n  },\r\n  'boardUser.$': Object, //se if need to replace Object with a schema\r\n  boardPrivacy: {\r\n      type: SimpleSchema.Integer,\r\n      label: \"Privacy\",\r\n      required: true\r\n  },\r\n  boardList: {\r\n      type: Array,\r\n      label: \"Lists\",\r\n      defaultValue: []\r\n  },\r\n  'boardList.$': Object, //se if need to replace Object with a schema\r\n  boardTag: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'boardTag.$': Object, //se if need to replace Object with a schema\r\n  boardTeam: {\r\n      type: Array,\r\n      label: \"Teams\",\r\n      defaultValue: []\r\n  },\r\n  'boardTeam.$': Object, //se if need to replace Object with a schema\r\n  boardCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nBoards.attachSchema(BoardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Cards = new Mongo.Collection('cards')\r\n\r\nCardSchema = new SimpleSchema({\r\n  cardId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  cardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  cardDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      defaultValue: []\r\n  },\r\n  cardTag: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'cardTag.$': Object, //se if need to replace Object with a schema\r\n  cardComment: {\r\n      type: Array,\r\n      label: \"Comments\",\r\n      defaultValue: []\r\n  },\r\n  'cardComment.$': Object, //se if need to replace Object with a schema\r\n  cardAttachment: {\r\n      type: Array,\r\n      label: \"Attachments\",\r\n      defaultValue: []\r\n  },\r\n  'cardAttachment.$': Object, //se if need to replace Object with a schema\r\n  cardChecklist: {\r\n      type: Array,\r\n      label: \"CheckLists\",\r\n      defaultValue: []\r\n  },\r\n  'cardChecklist.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nCards.attachSchema(CardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Lists = new Mongo.Collection('lists')\r\n\r\nListSchema = new SimpleSchema({\r\n  listId: {\r\n    type: String,\r\n    label: \"Id\",\r\n    regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  listTitle: {\r\n    type: String,\r\n    label: \"Title\",\r\n    required: true\r\n  },\r\n  listCard:{\r\n    type: Array,\r\n    label: \"Cards\",\r\n    defaultValue: []\r\n  },\r\n  'listCard.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nLists.attachSchema(ListSchema);","import { Mongo } from 'meteor/mongo'\r\nimport {User} from './Users.js'\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nexport const Teams = new Mongo.Collection('teams')\r\n\r\n\r\nconst TeamSchema = new SimpleSchema({\r\n  teamId: {\r\n      type: String,\r\n      label: \"Id\",\r\n      regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  teamName: {\r\n      type: String,\r\n      label: \"Name\",\r\n  },\r\n  teamDescription: {\r\n      type: String,\r\n      label: \"Description\",\r\n      defaultValue: \"\"\r\n  },\r\n  teamOwner : {\r\n    type: String,\r\n    label: \"Owner\"\r\n},\r\n  teamMembers:{\r\n      type: Array,\r\n      label: \"Members\",\r\n      defaultValue: []\r\n  },\r\n  \"teamMembers.$\" : User, //see if need to replace Object with a schema\r\n  teamCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nTeams.attachSchema(TeamSchema);","import { Mongo } from 'meteor/mongo'\r\nimport { SimpleSchema } from 'simpl-schema/dist/SimpleSchema';\r\n\r\nexport const User = new SimpleSchema({\r\n    name:{\r\n        type:String\r\n    }\r\n})","import { Meteor } from 'meteor/meteor';\r\n\r\nimport './api/users.js';\r\n\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\nimport  SimpleSchema  from 'simpl-schema';\r\nimport {Team}  from \"./models//Team\"\r\nimport {Board} from \"./models/Boards.js\";\r\nimport {Users} from './models/Users'\r\nimport Card from \"./models/Card.js\"\r\n\r\nMeteor.startup(() => {\r\n    require(\"./api/BoardsRoutes\")\r\n    require(\"./api/ListsRoutes\")\r\n    require(\"./api/teams\")\r\n    JsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n        console.log(req)\r\n        Card.insert({\r\n            cardtitle: \"oui\",\r\n            description: \"non\"\r\n        })\r\n        JsonRoutes.sendResult(res, {\r\n            data: {\r\n                result: Card.find().fetch()\r\n            }\r\n        });\r\n    });\r\n});"]}}]
[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nECMAScript = Package.ecmascript.ECMAScript;\nRestivus = Package['nimble:restivus'].Restivus;\nCollection2 = Package['aldeed:collection2'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"api\":{\"BoardsRoutes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// api/BoardsRoutes.js                                                                 //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nlet Boards;\nmodule.link(\"../models/Boards\", {\n  Boards(v) {\n    Boards = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"asteroid\", {\n  \"*\"(v) {\n    Random = v;\n  }\n\n}, 2);\nMeteor.publish('boards', function () {\n  return Boards.find();\n});\nMeteor.methods({\n  'board.createBoard'(boardName) {\n    return Boards.insert({\n      boardId: id,\n      boardTitle: boardName,\n      boardPrivacy: 1,\n      boardUser: [Meteor.user()]\n    });\n  },\n\n  'board.getBoard'({\n    idBoard\n  }) {\n    let board;\n    let countDoc = Boards.find({\n      \"boardId\": idBoard\n    }).count();\n    console.log(countDoc);\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": idBoard\n      });\n      return board;\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  'boards.removeBoard'(boardId) {\n    return Boards.remove(boardId);\n  },\n\n  'boards.editBoard'(newBoard) {\n    return Boards.update({\n      boardId: newBoard.boardId\n    }, {\n      $set: {\n        boardTitle: newBoard.boardTitle,\n        boardPrivacy: newBoard.privacy\n      }\n    });\n  },\n\n  'getAllBoards'({\n    idUser\n  }) {}\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ListsRoutes.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// api/ListsRoutes.js                                                                  //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nlet Lists;\nmodule.link(\"../models/List\", {\n  Lists(v) {\n    Lists = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 3);\nMeteor.methods({\n  'list.createList'(listName) {\n    let id = Random.id();\n    return Lists.insert({\n      listId: id,\n      listTitle: listName\n    });\n  },\n\n  'getList'(idList) {\n    let countDoc = Lists.find({\n      \"listId\": idList\n    }).count();\n\n    if (countDoc === 1) {\n      let list = List.findOne({\n        \"listId\": idList\n      });\n      return list;\n    } else {\n      throw new Meteor.Error(404, 'List not found');\n    }\n  },\n\n  'deleteList'({\n    idBoard\n  }) {},\n\n  'editList'({\n    idBoard,\n    newParams\n  }) {},\n\n  'getAllList'({\n    idUser\n  }) {}\n\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// api/users.js                                                                        //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nMeteor.methods({\n  \"users.signUp\"({\n    lastname,\n    firstname,\n    email,\n    password\n  }) {\n    console.log(password);\n    if (password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\");else if (!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\");else {\n      let options = {\n        email: email,\n        password: password,\n        profile: {\n          lastname: lastname,\n          firstname: firstname,\n          enabledMails: false,\n          email: email\n        }\n      };\n      Accounts.createUser(options);\n    }\n  },\n\n  \"users.updateProfile\"(email, lastname, firstname) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        emails: [{\n          address: email,\n          verified: true\n        }],\n        'profile.lastname': lastname,\n        'profile.firstname': firstname,\n        'profile.email': email\n      }\n    });\n    return Meteor.user();\n  },\n\n  'users.changePassword'(actualPassword, newPassword) {\n    let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\n\n    if (checkPassword.error) throw new Meteor.Error(checkPassword.error.reason);else {\n      Accounts.setPassword(Meteor.userId(), newPassword, {\n        logout: false\n      });\n    }\n  },\n\n  'users.setEnabledMails'(enabledMails) {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        'profile.enabledMails': enabledMails\n      }\n    });\n    return Meteor.user();\n  },\n\n  'users.remove'() {\n    Meteor.users.remove(Meteor.userId());\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"Boards.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// models/Boards.js                                                                    //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.export({\n  Boards: () => Boards\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nconst Boards = new Mongo.Collection('boards');\nBoardSchema = new SimpleSchema({\n  boardTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  boardUsers: {\n    type: Array,\n    label: \"Users\",\n    required: true\n  },\n  'boardUsers.$': Object,\n  //se if need to replace Object with a schema\n  boardPrivacy: {\n    type: SimpleSchema.Integer,\n    label: \"Privacy\",\n    required: true\n  },\n  boardLists: {\n    type: Array,\n    label: \"Lists\",\n    defaultValue: []\n  },\n  'boardLists.$': Object,\n  //se if need to replace Object with a schema\n  boardTags: {\n    type: Array,\n    label: \"Tags\",\n    defaultValue: []\n  },\n  'boardTags.$': Object,\n  //se if need to replace Object with a schema\n  boardTeams: {\n    type: Array,\n    label: \"Teams\",\n    defaultValue: []\n  },\n  'boardTeams.$': Object,\n  //se if need to replace Object with a schema\n  boardCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nBoards.attachSchema(BoardSchema);\n/////////////////////////////////////////////////////////////////////////////////////////\n\n},\"List.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// models/List.js                                                                      //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nmodule.export({\n  Lists: () => Lists\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Lists = new Mongo.Collection('lists');\nListSchema = new SimpleSchema({\n  listId: {\n    type: String,\n    label: \"Id\",\n    regEx: SimpleSchema.RegEx.Id\n  },\n  listTitle: {\n    type: String,\n    label: \"Title\",\n    required: true\n  },\n  listCard: {\n    type: Array,\n    label: \"Cards\",\n    defaultValue: []\n  },\n  'listCard.$': Object,\n  //se if need to replace Object with a schema\n  listCreatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    }\n  }\n});\nLists.attachSchema(ListSchema);\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// main.js                                                                             //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.link(\"./api/users.js\");\nmodule.link(\"./api/BoardsRoutes\");\nmodule.link(\"./api/ListsRoutes\");\nMeteor.startup(() => {});\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["api/BoardsRoutes.js","api/ListsRoutes.js","api/users.js","models/Boards.js","models/List.js","main.js"],"names":["Boards","module","link","v","Meteor","Random","publish","find","methods","boardName","insert","boardId","id","boardTitle","boardPrivacy","boardUser","user","idBoard","board","countDoc","count","console","log","findOne","Error","remove","newBoard","update","$set","privacy","idUser","Lists","JsonRoutes","listName","listId","listTitle","idList","list","List","newParams","Middleware","use","req","res","next","query","error","sendResult","code","data","result","add","users","username","body","state","firstname","lastname","password","email","fetch","Accounts","length","options","profile","enabledMails","createUser","userId","emails","address","verified","actualPassword","newPassword","checkPassword","_checkPassword","reason","setPassword","logout","export","Mongo","SimpleSchema","default","Collection","BoardSchema","type","String","label","required","boardUsers","Array","Object","Integer","boardLists","defaultValue","boardTags","boardTeams","boardCreatedAt","Date","autoValue","attachSchema","ListSchema","regEx","RegEx","Id","listCard","listCreatedAt","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import {Boards} from \"../models/Boards\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport * as Random from \"asteroid\";\r\n\r\nMeteor.publish('boards', function () {return Boards.find()});\r\n\r\nMeteor.methods({\r\n    'board.createBoard'(boardName) {\r\n        return Boards.insert({boardId: id, boardTitle: boardName,boardPrivacy: 1, boardUser: [Meteor.user()]})\r\n    },\r\n\r\n    'board.getBoard' ({idBoard}) {\r\n        let board;\r\n        let countDoc = Boards.find({\"boardId\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            return board;\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n\r\n    },\r\n\r\n    'boards.removeBoard'(boardId) {\r\n        return Boards.remove(boardId);\r\n    },\r\n\r\n    'boards.editBoard' (newBoard) {\r\n        return Boards.update({boardId: newBoard.boardId}, { $set: {\r\n                boardTitle: newBoard.boardTitle,\r\n                boardPrivacy: newBoard.privacy\r\n        }})\r\n\r\n    },\r\n\r\n    'getAllBoards' ({idUser}){\r\n\r\n    }\r\n})","import {Lists} from \"../models/List\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\n\r\nMeteor.methods({\r\n    'list.createList'(listName) {\r\n        let id = Random.id();\r\n        return Lists.insert({listId: id, listTitle: listName})\r\n    },\r\n\r\n    'getList' (idList) {\r\n        let countDoc = Lists.find({\"listId\": idList}).count();\r\n        if (countDoc === 1) {\r\n            let list = List.findOne({\"listId\": idList});\r\n            return list;\r\n        } else {\r\n            throw new Meteor.Error(404, 'List not found')\r\n        }\r\n\r\n    },\r\n    'deleteList'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editList' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllList' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\n\r\n\r\nMeteor.methods({\r\n    \"users.signUp\"({lastname, firstname, email, password}){\r\n        console.log(password)\r\n        if(password.length < 6) throw new Meteor.Error(\"Too short password, at least 6 characters.\")\r\n        else if(!email || !lastname || !firstname) throw new Meteor.Error(\"Some field are empty.\")\r\n        else {\r\n            let options = {\r\n                email: email,\r\n                password: password,\r\n                profile: {\r\n                    lastname: lastname,\r\n                    firstname: firstname,\r\n                    enabledMails: false,\r\n                    email: email \r\n                }\r\n            };\r\n\r\n            Accounts.createUser(options);\r\n        }\r\n    },\r\n    \"users.updateProfile\"(email, lastname, firstname){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            emails: [{address: email, verified: true}],\r\n            'profile.lastname': lastname,\r\n            'profile.firstname': firstname,\r\n            'profile.email': email\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.changePassword'(actualPassword, newPassword){\r\n        let checkPassword = Accounts._checkPassword(Meteor.user(), actualPassword);\r\n        if(checkPassword.error) throw new Meteor.Error(checkPassword.error.reason)\r\n        else{\r\n            Accounts.setPassword(Meteor.userId(), newPassword, {logout: false});\r\n        }\r\n    },\r\n    'users.setEnabledMails'(enabledMails){\r\n        Meteor.users.update(Meteor.userId(), { $set: {\r\n            'profile.enabledMails': enabledMails\r\n        }});\r\n        return Meteor.user();\r\n    },\r\n    'users.remove'(){\r\n        Meteor.users.remove(Meteor.userId());\r\n    }\r\n})","import { Mongo } from 'meteor/mongo'\r\n\r\nexport const Boards = new Mongo.Collection('boards')\r\n\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\nBoardSchema = new SimpleSchema({\r\n  boardTitle: {\r\n      type: String,\r\n      label: \"Title\",\r\n      required: true\r\n  },\r\n  boardUsers: {\r\n      type: Array,\r\n      label: \"Users\",\r\n      required: true\r\n  },\r\n  'boardUsers.$': Object, //se if need to replace Object with a schema\r\n  boardPrivacy: {\r\n      type: SimpleSchema.Integer,\r\n      label: \"Privacy\",\r\n      required: true\r\n  },\r\n  boardLists: {\r\n      type: Array,\r\n      label: \"Lists\",\r\n      defaultValue: []\r\n  },\r\n  'boardLists.$': Object, //se if need to replace Object with a schema\r\n  boardTags: {\r\n      type: Array,\r\n      label: \"Tags\",\r\n      defaultValue: []\r\n  },\r\n  'boardTags.$': Object, //se if need to replace Object with a schema\r\n  boardTeams: {\r\n      type: Array,\r\n      label: \"Teams\",\r\n      defaultValue: []\r\n  },\r\n  'boardTeams.$': Object, //se if need to replace Object with a schema\r\n  boardCreatedAt:{\r\n      type: Date,\r\n      autoValue: function(){return new Date();}\r\n  }\r\n});\r\n\r\nBoards.attachSchema(BoardSchema);","import SimpleSchema from 'simpl-schema';\r\n\r\nimport { Mongo } from 'meteor/mongo'\r\n\r\nexport const Lists = new Mongo.Collection('lists')\r\n\r\nListSchema = new SimpleSchema({\r\n  listId: {\r\n    type: String,\r\n    label: \"Id\",\r\n    regEx: SimpleSchema.RegEx.Id\r\n  },\r\n  listTitle: {\r\n    type: String,\r\n    label: \"Title\",\r\n    required: true\r\n  },\r\n  listCard:{\r\n    type: Array,\r\n    label: \"Cards\",\r\n    defaultValue: []\r\n  },\r\n  'listCard.$': Object, //se if need to replace Object with a schema\r\n  listCreatedAt:{\r\n    type: Date,\r\n    autoValue: function(){return new Date();}\r\n}\r\n});\r\n\r\nLists.attachSchema(ListSchema);","import { Meteor } from 'meteor/meteor';\r\n\r\nimport './api/users.js';\r\nimport './api/BoardsRoutes'\r\nimport './api/ListsRoutes'\r\n\r\nMeteor.startup(() => {\r\n\r\n});"]}}]
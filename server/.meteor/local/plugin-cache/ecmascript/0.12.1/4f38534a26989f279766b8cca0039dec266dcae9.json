{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\boards.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"api/boards.js","filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\boards.js","passPerPreset":false,"envName":"development","cwd":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","root":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","generatorOpts":{"filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\boards.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"api/boards.js"}},"code":"var Boards;\nmodule.link(\"../models/Boards\", {\n  Boards: function (v) {\n    Boards = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar boardUtils;\nmodule.link(\"./Utils/boardUtils\", {\n  boardUtils: function (v) {\n    boardUtils = v;\n  }\n}, 2);\nvar rusFunction;\nmodule.link(\"rus-diff\", {\n  \"default\": function (v) {\n    rusFunction = v;\n  }\n}, 3);\nMeteor.publish('boards', function () {\n  return Boards.find();\n});\nMeteor.methods({\n  'boards.createBoard': function (board) {\n    console.log(\"test\");\n\n    if (Meteor.userId()) {\n      console.log(board);\n      return Boards.insert(board);\n    } else {\n      throw Meteor.Error(401, \"You are not authentificated\");\n    }\n  },\n  'boards.getBoard': function (idBoard) {\n    var board;\n    var countDoc = Boards.find({\n      \"boardId\": idBoard\n    }).count();\n    console.log(countDoc);\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": idBoard\n      }); //if(board.boardPrivacy == 1){\n      //  if(Meteor.userId()){\n      //    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n      //      return board\n      //}else{\n      //  return Meteor.Error(403, \"You are not on this allow to see this board\")\n      //}\n      //}else{\n      //    return Meteor.Error(401, \"You are not authentificated\")\n      //}\n      //}else{\n\n      return board; //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n\n  /*'boards.getBoardFromExt' (idBoard,token) {\r\n      let decodedToken = \"xd\"\r\n      let board;\r\n      let countDoc = Boards.find({\"_id\": idBoard}).count();\r\n      console.log(countDoc)\r\n      if (countDoc === 1) {\r\n          board = Boards.findOne({\"boardId\": idBoard});\r\n          if(board.boardPrivacy == 1){\r\n              if(token.userId){\r\n                  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                      return board\r\n                  }else{\r\n                      return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                  }\r\n                }else{\r\n                  return Meteor.Error(401, \"You are not authentificated\")\r\n              }\r\n          }\r\n          return board;\r\n      } else {\r\n          throw new Meteor.Error(404, 'Board not found')\r\n      }\r\n  },*/\n  'boards.removeBoard': function (boardId) {\n    var board;\n    var countDoc = Boards.find({\n      \"_id\": boardId\n    }).count(); //console.log(countDoc)\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return Boards.remove(boardId); //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'boards.editBoard': function (newBoard) {\n    var countDoc = Boards.find({\n      \"boardId\": newBoard.boardId\n    }).count();\n\n    if (countDoc === 1) {\n      console.log(\"In\");\n      console.log(newBoard.boardList[0].listCard[0]);\n      Boards.update({\n        boardId: newBoard.boardId\n      }, {\n        $set: {\n          boardTitle: newBoard.boardTitle,\n          boardPrivacy: newBoard.privacy,\n          boardUsers: newBoard.boardUsers\n        }\n      });\n      /*newBoard.boardList.forEach((list) => {\r\n               Boards.update({boardId: newBoard.boardId, 'boardList.listId': list.listId}, {\r\n                   $set: {\r\n                       \"boardList.list.listCard.$[]\": list.listCard,\r\n                   }\r\n                 })\r\n           })*/\n\n      /*newBoard.boardList.forEach((list) => {\r\n          Boards.update({boardId: newBoard.boardId, \"boardList.listId\": list.listId}, {\r\n              $set: {\r\n                  boardTitle: newBoard.boardTitle,\r\n                  boardPrivacy: newBoard.privacy,\r\n              }\r\n          })\r\n      })*/\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'board.getAllBoards': function () {\n    return Boards.find().fetch();\n  },\n  'board.getUserAllBoards': function (userId) {\n    var allBoards = Boards.find().fetch();\n    var userBoard = [];\n    allBoards.map(function (board) {\n      if (boardUtils.checkInBoardUser(userId)) {\n        userBoard.push(board);\n      }\n    });\n    return allBoards;\n  },\n  'board.getTeam': function (boardId) {\n    var board;\n    var countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return board.boardTeams; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'board.getCards': function (boardId) {\n    var board;\n    var countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      var cards = [];\n      board.boardList.map(function (list) {\n        // noinspection JSAnnotator\n        var theList = Meteor.call('getList', list._id);\n        theList.listCard.map(function (card) {\n          cards.push(card);\n        });\n      });\n      return cards; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'boards.getTags': function (boardId) {\n    var board;\n    var countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      return board.boardTags; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'boards.getLists': function (boardId) {\n    var board;\n    var lists = [];\n    var countDoc = Boards.find({\n      \"_id\": boardId\n    }).count();\n\n    if (countDoc === 1) {\n      board = Boards.findOne({\n        \"boardId\": boardId\n      }); //if(Meteor.userId()){\n      //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\n\n      board.boardList.map(function (list) {\n        var theList = Meteor.call('list.getList', list._id);\n        lists.push(theList);\n      });\n      return lists; //}else{\n      //  return Meteor.Error(403, \"You are not allow to delete this board\")\n      //}\n      //}else{\n      //  return Meteor.Error(401, \"You are not authentificated\")\n      //}\n    } else {\n      throw new Meteor.Error(404, 'Board not found');\n    }\n  },\n  'board.archiveList': function (boardId, listId) {},\n  'board.archiveCard': function (boardId, cardId) {}\n});","map":{"version":3,"sources":["api/boards.js"],"names":["Boards","module","link","v","Meteor","boardUtils","rusFunction","publish","find","methods","board","console","log","userId","insert","Error","idBoard","countDoc","count","findOne","boardId","remove","newBoard","boardList","listCard","update","$set","boardTitle","boardPrivacy","privacy","boardUsers","fetch","allBoards","userBoard","map","checkInBoardUser","push","boardTeams","cards","list","theList","call","_id","card","boardTags","lists","listId","cardId"],"mappings":"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","sourcesContent":["import {Boards} from \"../models/Boards\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {boardUtils} from \"./Utils/boardUtils\";\r\nimport rusFunction from 'rus-diff'\r\n\r\nMeteor.publish('boards', function () {return Boards.find()});\r\n\r\nMeteor.methods({\r\n\r\n    'boards.createBoard'(board) {\r\n        console.log(\"test\")\r\n        if(Meteor.userId()){\r\n            console.log(board)\r\n            return Boards.insert(board);\r\n        }else{\r\n            throw Meteor.Error(401, \"You are not authentificated\")\r\n        }\r\n    },\r\n\r\n    'boards.getBoard' (idBoard) {\r\n        let board;\r\n        let countDoc = Boards.find({\"boardId\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            //if(board.boardPrivacy == 1){\r\n              //  if(Meteor.userId()){\r\n                //    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                  //      return board\r\n                    //}else{\r\n                      //  return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                    //}\r\n\r\n                //}else{\r\n                //    return Meteor.Error(401, \"You are not authentificated\")\r\n                //}\r\n            //}else{\r\n                return board\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found');\r\n        }\r\n\r\n    },\r\n\r\n    /*'boards.getBoardFromExt' (idBoard,token) {\r\n        let decodedToken = \"xd\"\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": idBoard}).count();\r\n        console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": idBoard});\r\n            if(board.boardPrivacy == 1){\r\n                if(token.userId){\r\n                    if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                        return board\r\n                    }else{\r\n                        return Meteor.Error(403, \"You are not on this allow to see this board\")\r\n                    }\r\n\r\n                }else{\r\n                    return Meteor.Error(401, \"You are not authentificated\")\r\n                }\r\n            }\r\n            return board;\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },*/\r\n\r\n    'boards.removeBoard'(boardId) {\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        //console.log(countDoc)\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n              //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n                    return Boards.remove(boardId);\r\n                //}else{\r\n                  //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n                //}\r\n\r\n            //}else{\r\n              //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.editBoard' (newBoard) {\r\n        let countDoc = Boards.find({\"boardId\": newBoard.boardId}).count();\r\n        if (countDoc === 1) {\r\n            console.log(\"In\")\r\n            console.log(newBoard.boardList[0].listCard[0])\r\n            Boards.update({boardId: newBoard.boardId}, {\r\n                $set: {\r\n                    boardTitle: newBoard.boardTitle,\r\n                    boardPrivacy: newBoard.privacy,\r\n                    boardUsers: newBoard.boardUsers\r\n                }\r\n\r\n            })\r\n\r\n           /*newBoard.boardList.forEach((list) => {\r\n                    Boards.update({boardId: newBoard.boardId, 'boardList.listId': list.listId}, {\r\n                        $set: {\r\n                            \"boardList.list.listCard.$[]\": list.listCard,\r\n                        }\r\n\r\n                    })\r\n                })*/\r\n\r\n\r\n\r\n            /*newBoard.boardList.forEach((list) => {\r\n                Boards.update({boardId: newBoard.boardId, \"boardList.listId\": list.listId}, {\r\n                    $set: {\r\n                        boardTitle: newBoard.boardTitle,\r\n                        boardPrivacy: newBoard.privacy,\r\n                    }\r\n                })\r\n            })*/\r\n        }else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'board.getAllBoards' (){\r\n        return Boards.find().fetch();\r\n    },\r\n\r\n    'board.getUserAllBoards' (userId){\r\n        let allBoards = Boards.find().fetch()\r\n        let userBoard = []\r\n        allBoards.map((board) => {\r\n            if(boardUtils.checkInBoardUser(userId)){\r\n                userBoard.push(board)\r\n            }\r\n        })\r\n\r\n        return allBoards\r\n\r\n    },\r\n\r\n    'board.getTeam' (boardId){\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            return board.boardTeams;\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n    'board.getCards' (boardId) {\r\n        let board;\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            let cards = []\r\n            board.boardList.map((list) => {\r\n                // noinspection JSAnnotator\r\n                let theList = Meteor.call('getList',list._id)\r\n                theList.listCard.map((card) => {\r\n                    cards.push(card)\r\n                })\r\n            })\r\n\r\n            return cards\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.getTags' (boardId) {\r\n        let board\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            return board.boardTags\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n\r\n    'boards.getLists' (boardId) {\r\n        let board\r\n        let lists = []\r\n        let countDoc = Boards.find({\"_id\": boardId}).count();\r\n        if (countDoc === 1) {\r\n            board = Boards.findOne({\"boardId\": boardId});\r\n            //if(Meteor.userId()){\r\n            //  if(boardUtils.checkInBoardUser(Meteor.userId(), board)){\r\n            board.boardList.map((list) => {\r\n                let theList = Meteor.call('list.getList',list._id)\r\n                lists.push(theList)\r\n            })\r\n            return lists\r\n            //}else{\r\n            //  return Meteor.Error(403, \"You are not allow to delete this board\")\r\n            //}\r\n\r\n            //}else{\r\n            //  return Meteor.Error(401, \"You are not authentificated\")\r\n            //}\r\n        } else {\r\n            throw new Meteor.Error(404, 'Board not found')\r\n        }\r\n    },\r\n    'board.archiveList' (boardId,listId) {\r\n\r\n    },\r\n\r\n    'board.archiveCard' (boardId, cardId) {\r\n\r\n    }\r\n\r\n})\r\n"]},"sourceType":"script","hash":"4f38534a26989f279766b8cca0039dec266dcae9"}

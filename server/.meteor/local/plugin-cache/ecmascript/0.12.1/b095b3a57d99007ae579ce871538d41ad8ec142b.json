{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\ListsRoutes.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"api/ListsRoutes.js","filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\ListsRoutes.js","passPerPreset":false,"envName":"development","cwd":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","root":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","generatorOpts":{"filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\api\\ListsRoutes.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"api/ListsRoutes.js"}},"code":"let Lists;\nmodule.link(\"../models/List\", {\n  Lists(v) {\n    Lists = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet JsonRoutes;\nmodule.link(\"meteor/simple:json-routes\", {\n  JsonRoutes(v) {\n    JsonRoutes = v;\n  }\n\n}, 3);\nMeteor.methods({\n  'list.createList'(listName) {\n    let id = Random.id();\n    return Lists.insert({\n      listId: id,\n      listTitle: listName\n    });\n  },\n\n  'getList'(idList) {\n    let countDoc = Lists.find({\n      \"listId\": idList\n    }).count();\n\n    if (countDoc === 1) {\n      let list = List.findOne({\n        \"listId\": idList\n      });\n      return list;\n    } else {\n      throw new Meteor.Error(404, 'List not found');\n    }\n  },\n\n  'deleteList'(_ref) {\n    let {\n      idBoard\n    } = _ref;\n  },\n\n  'editList'(_ref2) {\n    let {\n      idBoard,\n      newParams\n    } = _ref2;\n  },\n\n  'getAllList'(_ref3) {\n    let {\n      idUser\n    } = _ref3;\n  }\n\n}); // code to run on server at startup\n\nJsonRoutes.Middleware.use(function (req, res, next) {\n  if (req.query.error) {\n    JsonRoutes.sendResult(res, {\n      code: 401,\n      data: {\n        result: \"ERROR\"\n      }\n    });\n  }\n\n  next();\n});\nJsonRoutes.add('post', '/signUp/', function (req, res, next) {\n  console.log(req);\n  Meteor.users.insert({\n    username: req.body.state.username,\n    firstname: req.body.state.firstname,\n    lastname: req.body.state.lastname,\n    password: req.body.state.password,\n    email: req.body.state.email\n  });\n  JsonRoutes.sendResult(res, {\n    data: {\n      result: Meteor.users.find().fetch()\n    }\n  });\n});","map":{"version":3,"sources":["api/ListsRoutes.js"],"names":["Lists","module","link","v","Meteor","Random","JsonRoutes","methods","listName","id","insert","listId","listTitle","idList","countDoc","find","count","list","List","findOne","Error","idBoard","newParams","idUser","Middleware","use","req","res","next","query","error","sendResult","code","data","result","add","console","log","users","username","body","state","firstname","lastname","password","email","fetch"],"mappings":"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","sourcesContent":["import {Lists} from \"../models/List\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport { Random } from 'meteor/random';\r\nimport { JsonRoutes } from 'meteor/simple:json-routes';\r\n\r\n\r\nMeteor.methods({\r\n    'list.createList'(listName) {\r\n        let id = Random.id();\r\n        return Lists.insert({listId: id, listTitle: listName})\r\n    },\r\n\r\n    'getList' (idList) {\r\n        let countDoc = Lists.find({\"listId\": idList}).count();\r\n        if (countDoc === 1) {\r\n            let list = List.findOne({\"listId\": idList});\r\n            return list;\r\n        } else {\r\n            throw new Meteor.Error(404, 'List not found')\r\n        }\r\n\r\n    },\r\n    'deleteList'({idBoard}) {\r\n\r\n    },\r\n\r\n    'editList' ({idBoard,newParams}) {\r\n\r\n    },\r\n\r\n    'getAllList' ({idUser}){\r\n\r\n    }\r\n})\r\n\r\n// code to run on server at startup\r\nJsonRoutes.Middleware.use(function(req, res, next) {\r\n    if(req.query.error) {\r\n        JsonRoutes.sendResult(res, {\r\n            code: 401,\r\n            data: {\r\n                result: \"ERROR\"\r\n            }\r\n        })\r\n    }\r\n\r\n    next();\r\n});\r\n\r\n\r\nJsonRoutes.add('post', '/signUp/', function(req, res, next) {\r\n    console.log(req)\r\n    Meteor.users.insert({\r\n        username: req.body.state.username,\r\n        firstname: req.body.state.firstname,\r\n        lastname: req.body.state.lastname,\r\n        password: req.body.state.password,\r\n        email: req.body.state.email\r\n    })\r\n    JsonRoutes.sendResult(res, {\r\n        data: {\r\n            result: Meteor.users.find().fetch()\r\n        }\r\n    });\r\n});\r\n\r\n"]},"sourceType":"script","hash":"b095b3a57d99007ae579ce871538d41ad8ec142b"}

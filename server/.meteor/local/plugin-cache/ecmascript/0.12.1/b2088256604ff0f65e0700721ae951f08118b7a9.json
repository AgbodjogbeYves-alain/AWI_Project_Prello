{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\models\\Users.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"models/Users.js","filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\models\\Users.js","passPerPreset":false,"envName":"development","cwd":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","root":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server","presets":[],"generatorOpts":{"filename":"S:\\Document\\IG5\\AWI\\Prello\\AWI_Project_Prello\\server\\models\\Users.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"models/Users.js"}},"code":"module.export({\n  UserSchema: () => UserSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nconst UserProfileSchema = new SimpleSchema({\n  firstname: {\n    type: String,\n    optional: true\n  },\n  lastname: {\n    type: String,\n    optional: true\n  },\n  email: {\n    type: String,\n    optional: true\n  },\n  ennabledMails: {\n    type: Boolean,\n    optional: true\n  }\n});\nconst UserSchema = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"emails.$.verified\": {\n    type: Boolean\n  },\n  // Use this registered_emails field if you are using splendido:meteor-accounts-emails-field / splendido:meteor-accounts-meld\n  registered_emails: {\n    type: Array,\n    optional: true\n  },\n  'registered_emails.$': {\n    type: Object,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date\n  },\n  profile: {\n    type: UserProfileSchema,\n    optional: true\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  roles: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Option 2: [String] type\n  // If you are sure you will never need to use role groups, then\n  // you can specify [String] as the type\n  roles: {\n    type: Array,\n    optional: true\n  },\n  'roles.$': {\n    type: String\n  },\n  // In order to avoid an 'Exception in setInterval callback' from Meteor\n  heartbeat: {\n    type: Date,\n    optional: true\n  }\n});\nMeteor.users.attachSchema(UserSchema);","map":{"version":3,"sources":["models/Users.js"],"names":["module","export","UserSchema","SimpleSchema","link","default","v","UserProfileSchema","firstname","type","String","optional","lastname","email","ennabledMails","Boolean","username","emails","Array","Object","regEx","RegEx","Email","registered_emails","blackbox","createdAt","Date","profile","services","roles","heartbeat","Meteor","users","attachSchema"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,UAAU,EAAC,MAAIA;AAAhB,CAAd;AAA2C,IAAIC,YAAJ;AAAiBH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACH,IAAAA,YAAY,GAACG,CAAb;AAAe;;AAA3B,CAA3B,EAAwD,CAAxD;AAE5D,MAAMC,iBAAiB,GAAG,IAAIJ,YAAJ,CAAiB;AACvCK,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GAD4B;AAKvCC,EAAAA,QAAQ,EAAE;AACNH,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GAL6B;AASvCE,EAAAA,KAAK,EAAG;AACJJ,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAT+B;AAavCG,EAAAA,aAAa,EAAE;AACXL,IAAAA,IAAI,EAAEM,OADK;AAEXJ,IAAAA,QAAQ,EAAE;AAFC;AAbwB,CAAjB,CAA1B;AAmBO,MAAMT,UAAU,GAAG,IAAIC,YAAJ,CAAiB;AACvCa,EAAAA,QAAQ,EAAE;AACNP,IAAAA,IAAI,EAAEC,MADA;AAEN;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE;AALJ,GAD6B;AAQvCM,EAAAA,MAAM,EAAE;AACJR,IAAAA,IAAI,EAAES,KADF;AAEJ;AACA;AACA;AACAP,IAAAA,QAAQ,EAAE;AALN,GAR+B;AAevC,cAAY;AACRF,IAAAA,IAAI,EAAEU;AADE,GAf2B;AAkBvC,sBAAoB;AAChBV,IAAAA,IAAI,EAAEC,MADU;AAEhBU,IAAAA,KAAK,EAAEjB,YAAY,CAACkB,KAAb,CAAmBC;AAFV,GAlBmB;AAsBvC,uBAAqB;AACjBb,IAAAA,IAAI,EAAEM;AADW,GAtBkB;AAyBvC;AACAQ,EAAAA,iBAAiB,EAAE;AACfd,IAAAA,IAAI,EAAES,KADS;AAEfP,IAAAA,QAAQ,EAAE;AAFK,GA1BoB;AA8BvC,yBAAuB;AACnBF,IAAAA,IAAI,EAAEU,MADa;AAEnBK,IAAAA,QAAQ,EAAE;AAFS,GA9BgB;AAkCvCC,EAAAA,SAAS,EAAE;AACPhB,IAAAA,IAAI,EAAEiB;AADC,GAlC4B;AAqCvCC,EAAAA,OAAO,EAAE;AACLlB,IAAAA,IAAI,EAAEF,iBADD;AAELI,IAAAA,QAAQ,EAAE;AAFL,GArC8B;AAyCvC;AACAiB,EAAAA,QAAQ,EAAE;AACNnB,IAAAA,IAAI,EAAEU,MADA;AAENR,IAAAA,QAAQ,EAAE,IAFJ;AAGNa,IAAAA,QAAQ,EAAE;AAHJ,GA1C6B;AA+CvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,EAAAA,KAAK,EAAE;AACHpB,IAAAA,IAAI,EAAEU,MADH;AAEHR,IAAAA,QAAQ,EAAE,IAFP;AAGHa,IAAAA,QAAQ,EAAE;AAHP,GAvDgC;AA4DvC;AACA;AACA;AACAK,EAAAA,KAAK,EAAE;AACHpB,IAAAA,IAAI,EAAES,KADH;AAEHP,IAAAA,QAAQ,EAAE;AAFP,GA/DgC;AAmEvC,aAAW;AACPF,IAAAA,IAAI,EAAEC;AADC,GAnE4B;AAsEvC;AACAoB,EAAAA,SAAS,EAAE;AACPrB,IAAAA,IAAI,EAAEiB,IADC;AAEPf,IAAAA,QAAQ,EAAE;AAFH;AAvE4B,CAAjB,CAAnB;AA6EPoB,MAAM,CAACC,KAAP,CAAaC,YAAb,CAA0B/B,UAA1B","sourcesContent":["import SimpleSchema from 'simpl-schema';\r\n\r\nconst UserProfileSchema = new SimpleSchema({\r\n    firstname: {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    lastname: {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    email : {\r\n        type: String,\r\n        optional: true\r\n    },\r\n    ennabledMails: {\r\n        type: Boolean,\r\n        optional: true\r\n    }\r\n});\r\n\r\nexport const UserSchema = new SimpleSchema({\r\n    username: {\r\n        type: String,\r\n        // For accounts-password, either emails or username is required, but not both. It is OK to make this\r\n        // optional here because the accounts-password package does its own validation.\r\n        // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\r\n        optional: true\r\n    },\r\n    emails: {\r\n        type: Array,\r\n        // For accounts-password, either emails or username is required, but not both. It is OK to make this\r\n        // optional here because the accounts-password package does its own validation.\r\n        // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\r\n        optional: true\r\n    },\r\n    \"emails.$\": {\r\n        type: Object\r\n    },\r\n    \"emails.$.address\": {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Email\r\n    },\r\n    \"emails.$.verified\": {\r\n        type: Boolean\r\n    },\r\n    // Use this registered_emails field if you are using splendido:meteor-accounts-emails-field / splendido:meteor-accounts-meld\r\n    registered_emails: {\r\n        type: Array,\r\n        optional: true\r\n    },\r\n    'registered_emails.$': {\r\n        type: Object,\r\n        blackbox: true\r\n    },\r\n    createdAt: {\r\n        type: Date\r\n    },\r\n    profile: {\r\n        type: UserProfileSchema,\r\n        optional: true\r\n    },\r\n    // Make sure this services field is in your schema if you're using any of the accounts packages\r\n    services: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true\r\n    },\r\n    // Add `roles` to your schema if you use the meteor-roles package.\r\n    // Option 1: Object type\r\n    // If you specify that type as Object, you must also specify the\r\n    // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\r\n    // Example:\r\n    // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\r\n    // You can't mix and match adding with and without a group since\r\n    // you will fail validation in some cases.\r\n    roles: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true\r\n    },\r\n    // Option 2: [String] type\r\n    // If you are sure you will never need to use role groups, then\r\n    // you can specify [String] as the type\r\n    roles: {\r\n        type: Array,\r\n        optional: true\r\n    },\r\n    'roles.$': {\r\n        type: String\r\n    },\r\n    // In order to avoid an 'Exception in setInterval callback' from Meteor\r\n    heartbeat: {\r\n        type: Date,\r\n        optional: true\r\n    }\r\n});\r\n\r\nMeteor.users.attachSchema(UserSchema);"]},"sourceType":"script","hash":"b2088256604ff0f65e0700721ae951f08118b7a9"}
